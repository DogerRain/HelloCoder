(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{440:function(t,a,s){"use strict";s.r(a);var n=s(7),r=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"spring的事务失效场景有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring的事务失效场景有哪些"}},[t._v("#")]),t._v(" spring的事务失效场景有哪些？")]),t._v(" "),a("p",[t._v("在spring框架中，使用事务还是很简单的，只需要在对应的方法上加上"),a("code",[t._v("@Transactional")]),t._v("注解即可，但并不是加了注解事务就会生效，开发者在使用该注解的时候，需要注意的地方还是很多的，所以这也是面试中经常会问到的。")]),t._v(" "),a("p",[t._v("简单总结一下spring事务失效的场景：")]),t._v(" "),a("p",[t._v("1、注解@Transactional配置的方法非public权限修饰；")]),t._v(" "),a("p",[t._v("2、注解@Transactional所在类中，注解修饰的方法被类内部方法调用；")]),t._v(" "),a("p",[t._v("3、业务代码抛出异常类型"),a("code",[t._v("非RuntimeException")]),t._v("，事务失效；")]),t._v(" "),a("p",[t._v("4、业务代码中存在异常时，使用"),a("code",[t._v("try…catch…")]),t._v("语句块捕获，而catch语句块没有throw new RuntimeExecption异常;（相对于正常处理了）")]),t._v(" "),a("p",[t._v("5、注解@Transactional中Propagation属性值"),a("strong",[t._v("设置错误")]),t._v("即"),a("code",[t._v("Propagation.NOT_SUPPORTED")]),t._v("（一般不会设置此种传播机制），或者使用"),a("code",[t._v("PROPAGATION_REQUIRES_NEW")]),t._v("起一个新的事务，旧的事务报错了回滚，新的事务没有回滚。")]),t._v(" "),a("p",[t._v("6、mysql关系型数据库不支持，且存储引擎是MyISAM而非InnoDB，则事务会不起作用(基本开发中不会遇到)；")]),t._v(" "),a("p",[t._v("下面详细来说明一下事务的场景：")]),t._v(" "),a("h2",{attrs:{id:"_1、非public权限修饰方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、非public权限修饰方法"}},[t._v("#")]),t._v(" 1、非public权限修饰方法")]),t._v(" "),a("p",[t._v("spring事务也是通过动态代理来实现的，它在方法进来的时候判断当前method是否是public。（是spring对非public方法的过滤，其实jdk、cglib还是可以为非public方法生成代理对象的）")]),t._v(" "),a("blockquote",[a("p",[t._v("如果要用在非 public 方法上，可以开启 AspectJ 代理模式")])]),t._v(" "),a("h2",{attrs:{id:"_2、内部方法调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、内部方法调用"}},[t._v("#")]),t._v(" 2、内部方法调用")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Service")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OrderServiceImpl")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OrderService")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Transactional")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Order")]),t._v(" order"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateOrder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("order"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// @Transactional(propagation = Propagation.REQUIRES_NEW)")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Transactional")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("propagation "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Propagation")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("REQUIRED"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateOrder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Order")]),t._v(" order"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// update order")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("为什么会失效呢？其实原因很简单，Spring在扫描Bean的时候会自动为标注了@Transactional注解的类生成一个代理类（proxy）,当有注解的方法被调用的时候，实际上是代理类调用的，代理类在调用之前会开启事务，执行事务的操作，但是同类中的方法互相调用，相当于"),a("code",[t._v("this.updateOrder()")]),t._v("，此时的updateOrder方法并非是代理类调用，而是直接通过原有的Bean直接调用，所以注解会失效。")]),t._v(" "),a("p",[t._v("即使被调用方法用了 "),a("code",[t._v("Propagation.REQUIRES_NEW")]),t._v("也不会生效。")]),t._v(" "),a("p",[a("strong",[t._v("解决方法：")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Service")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OrderServiceImpl")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OrderService")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Autowired")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OrderServiceImpl")]),t._v(" orderService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Transactional")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Order")]),t._v(" order"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        orderService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateOrder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("order"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// @Transactional(propagation = Propagation.REQUIRES_NEW)")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Transactional")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("propagation "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Propagation")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("REQUIRED"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateOrder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Order")]),t._v(" order"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// update order")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"_3、非runtimeexception"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、非runtimeexception"}},[t._v("#")]),t._v(" 3、非RuntimeException")]),t._v(" "),a("p",[t._v("事务默认的回滚的异常是RuntimeException，如果是抛出"),a("code",[t._v("非RuntimeException")]),t._v(" ，是不会回滚的。")]),t._v(" "),a("p",[t._v("当然你也可以指定自定义的异常回滚。")]),t._v(" "),a("h2",{attrs:{id:"_4、try-catch捕获"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、try-catch捕获"}},[t._v("#")]),t._v(" 4、try…catch捕获")]),t._v(" "),a("p",[a("code",[t._v("try…catch")]),t._v("语句捕获后，就是相当于的异常处理了，这也是开发中要注意的，一不小心调用的方法有异常处理，捕获的时候也没有抛出，即使出错了，也不会回滚事务。")]),t._v(" "),a("h2",{attrs:{id:"_5、propagation属性值设置错误"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、propagation属性值设置错误"}},[t._v("#")]),t._v(" 5、Propagation属性值设置错误")]),t._v(" "),a("p",[a("code",[t._v("PROPAGATION_REQUIRED")]),t._v("  ：如果当前没有事务，就"),a("strong",[t._v("新建一个事务")]),t._v("。这是最常见的选择，也是 Spring 默认的事务的传播。")]),t._v(" "),a("p",[t._v("除此之外，还有很多属性，如果使用"),a("code",[t._v("PROPAGATION_REQUIRES_NEW")]),t._v("，表示新起一个事务，这样当两个事务就是不相干了，出错也会回滚。")]),t._v(" "),a("h2",{attrs:{id:"_6、mysql不支持事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6、mysql不支持事务"}},[t._v("#")]),t._v(" 6、mysql不支持事务")]),t._v(" "),a("p",[t._v("从 MySQL 5.5.5 开始的默认存储引擎是：InnoDB，之前默认的都是：MyISAM，所以这点要值得注意，底层引擎不支持事务，spring也没有办法，毕竟spring的事务就是建立在数据库的事务之上的。")])])}),[],!1,null,null,null);a.default=r.exports}}]);