(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{491:function(_,v,t){"use strict";t.r(v);var s=t(7),a=Object(s.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h2",{attrs:{id:"q-聊聊mysql索引的分类和结构吧"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#q-聊聊mysql索引的分类和结构吧"}},[_._v("#")]),_._v(" Q 聊聊MySQL索引的分类和结构吧")]),_._v(" "),v("p",[_._v("MySQL的索引作为MySQL知识点的核心内容，几乎在面试的时候都会必问。")]),_._v(" "),v("p",[_._v("为什么面试官都喜欢问MySQL的索引呢？我觉得有以下理由：")]),_._v(" "),v("ul",[v("li",[_._v("MySQL索引的设计十分高效，随着业务数据数量的激增诞生了B树、又过渡到了B+树。")]),_._v(" "),v("li",[_._v("只有对MySQL索引清晰地掌握，才能准确地给表加索引，才能在业务中优化SQL，定位问题。")])]),_._v(" "),v("p",[_._v("索引是一种数据结构，"),v("strong",[_._v("索引本身很大，不可能全部存储在内存中")]),_._v("，因此索引"),v("strong",[_._v("以索引表的形式存储在磁盘中")]),_._v("。")]),_._v(" "),v("p",[v("strong",[_._v("这样的话，索引查找过程中就要产生磁盘I/O消耗")]),_._v("，相对于内存存取，I/O存取的消耗要高几个数量级，所以评价一个数据结构作为索引的优劣最重要的指标就是在查找过程中磁盘I/O操作次数的渐进复杂度。换句话说，索引的结构组织要尽量减少查找过程中磁盘I/O的存取次数。")]),_._v(" "),v("h2",{attrs:{id:"_1、mysql索引的数据结构有哪几种"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1、mysql索引的数据结构有哪几种"}},[_._v("#")]),_._v(" 1、MySQL索引的数据结构有哪几种")]),_._v(" "),v("h3",{attrs:{id:"_1、hash索引"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1、hash索引"}},[_._v("#")]),_._v(" 1、Hash索引")]),_._v(" "),v("p",[v("strong",[_._v("哈希索引就是采用一定的哈希算法，把键值换算成新的哈希值")]),_._v("，检索时不需要类似B+树那样从根节点到叶子节点逐级查找，"),v("strong",[_._v("只需一次哈希算法即可立刻定位到相应的位置")]),_._v("，速度非常快。")]),_._v(" "),v("p",[_._v("Hash 索引的查询效率要远高于 B-Tree 索引。")]),_._v(" "),v("p",[_._v("和Java的HashMap十分类似。")]),_._v(" "),v("p",[_._v("虽然 Hash 索引 效率高，但是也有局限性：")]),_._v(" "),v("p",[_._v("（1）、不支持范围查询，因为经过相应的 Hash 算法处理之后的 Hash 值的大小关系，并不能保证和Hash运算前完全一样。所以它也不能用于排序")]),_._v(" "),v("p",[_._v("（2）、"),v("strong",[_._v("不支持多列联合索引的最左匹配规则")]),_._v("，对于组合索引，Hash 索引在计算 Hash 值的时候是组合索引键合并后再一起计算 Hash 值，而不是单独计算 Hash 值，所以通过组合索引的前面一个或几个索引键进行查询的时候，Hash 索引也无法被利用。")]),_._v(" "),v("p",[_._v("（3）、不能避免全表扫描；关键字检索效率比较平均，不像B树那样波动幅度大，在有"),v("strong",[_._v("大量重复键值情况下")]),_._v("，哈希索引的效率也是极低的，因为存在所谓的"),v("strong",[_._v("哈希碰撞")]),_._v("问题。")]),_._v(" "),v("h3",{attrs:{id:"_2、b-树索引"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2、b-树索引"}},[_._v("#")]),_._v(" 2、B+树索引")]),_._v(" "),v("p",[_._v("说到B+树，就不得不提到"),v("strong",[_._v("B-树索引")]),_._v("（"),v("strong",[_._v("B-树就是B树，中间的横线不是减号，所以不要读成B减树。")]),_._v("）")]),_._v(" "),v("h4",{attrs:{id:"_2-1、b-树索引"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-1、b-树索引"}},[_._v("#")]),_._v(" 2.1、B-树索引")]),_._v(" "),v("p",[_._v("B树（Balance Tree）是一种多路平衡查找树，他的"),v("strong",[_._v("每一个节点最多包含M个孩子，M就是B树的阶。")])]),_._v(" "),v("p",[_._v("M的大小取决于磁盘页的大小。")]),_._v(" "),v("p",[v("img",{attrs:{src:"http://dl2.iteye.com/upload/attachment/0130/5850/f355ed43-f79a-345e-85b6-74c57d0d1b59.png",alt:""}})]),_._v(" "),v("p",[v("strong",[_._v("B树中无论中间节点还是叶子节点都带有卫星数据。")])]),_._v(" "),v("p",[v("strong",[_._v("B+树中，只有叶子节点带卫星数据，其他中间节点仅仅是索引")]),_._v("，没有数据关联。")]),_._v(" "),v("h4",{attrs:{id:"_2-2、b-树索引"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-2、b-树索引"}},[_._v("#")]),_._v(" 2.2、B+树索引")]),_._v(" "),v("p",[v("img",{attrs:{src:"http://dl2.iteye.com/upload/attachment/0130/5852/20140319-6610-3522-9afa-71dcd962cd23.png",alt:""}})]),_._v(" "),v("p",[_._v("通过图片的对比，就能很清晰的区别"),v("strong",[_._v("B-树")]),_._v("和"),v("strong",[_._v("B+树")]),_._v("的区别。")]),_._v(" "),v("p",[v("strong",[_._v("B+树")]),_._v(" 每个叶子节点都带有指向下一个节点的指针，形成一个有序链表，中间节点没有卫星数据（存的不是整行的数据，而是指向下一层的索引），只有在最后一层叶子节点才有数据。")]),_._v(" "),v("p",[v("strong",[_._v("两者的区别：")])]),_._v(" "),v("p",[v("strong",[_._v("1、B+树中间节点没有卫星数据，所以同样大小的磁盘页上可以容纳更多节点元素。")])]),_._v(" "),v("p",[_._v("这就意味着，数据量相同的情况下，B+树结构比B-树更加矮胖，因此"),v("strong",[_._v("查询时IO会更少。")])]),_._v(" "),v("p",[v("strong",[_._v("2、B+树的查询必须最终找到叶子节点，而B-树只需要找到匹配的元素即可")]),_._v("，无论匹配元素是中间节点还是叶子节点。")]),_._v(" "),v("p",[v("strong",[_._v("因此B-树的查找性能不稳定（最好情况是只查根节点，最坏查到叶子节点），而B+树每次查找都是稳定点 。")])]),_._v(" "),v("p",[v("strong",[_._v("范围查询：")])]),_._v(" "),v("p",[v("strong",[_._v("B-树只能依靠")]),_._v("繁琐的"),v("strong",[_._v("中序遍历")]),_._v("，而"),v("strong",[_._v("B+树只需要在链表上遍历")]),_._v("即可。")]),_._v(" "),v("p",[_._v("综合起来，B+树比B-树优势有三个：")]),_._v(" "),v("p",[_._v("1、IO次数更少")]),_._v(" "),v("p",[_._v("2、查询性能稳定")]),_._v(" "),v("p",[_._v("3、范围查询简便。")]),_._v(" "),v("hr"),_._v(" "),v("p",[_._v("以上是关于索引数据结构的回答，当然还有：")]),_._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/01.LearnJavaToFindAJob/03.【中级】12k-26k档/MySQL/articles\\MySQL\\Innodb和MyISAM索引的区别.html"}},[_._v("Innodb和MyISAM索引的区别（B树、B+树、聚簇索引、非聚簇索引）？")])],1),_._v(" "),v("li",[v("RouterLink",{attrs:{to:"/01.LearnJavaToFindAJob/03.【中级】12k-26k档/MySQL/articles\\MySQL\\MySQL索引的分类、何时使用、何时不使用、何时失效？.html"}},[_._v("MySQL 索引的分类、何时使用、何时不使用、何时失效？")])],1)]),_._v(" "),v("p",[_._v("参考：")]),_._v(" "),v("ul",[v("li",[_._v("https://www.iteye.com/blog/uule-2429508")]),_._v(" "),v("li",[v("a",{attrs:{href:"https://juejin.cn/post/6844904073955639304",target:"_blank",rel:"noopener noreferrer"}},[_._v("联合索引在B+树上的存储结构"),v("OutboundLink")],1)])])])}),[],!1,null,null,null);v.default=a.exports}}]);