(window.webpackJsonp=window.webpackJsonp||[]).push([[93],{491:function(t,s,a){"use strict";a.r(s);var n=a(7),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("上次面试，面试官问有没有做过"),s("strong",[t._v("并发类")]),t._v("的系统")]),t._v(" "),s("blockquote",[s("p",[t._v("面试官：有做过并发类的项目吗？")]),t._v(" "),s("p",[t._v("我：有")]),t._v(" "),s("p",[t._v("然后就哔哩哔哩一大堆，synchronized、ReentrantLock、volatile 这些都问了，最后问到了分布式锁有没有用过，我就感觉这是个坑！")]),t._v(" "),s("p",[t._v("分布式倒是用过，分布式锁我也知道一大堆，但是你问我Redis的分布式锁原理是什么就过分了。")])]),t._v(" "),s("p",[s("strong",[t._v("面试完了，来总结一下，GO！！！")])]),t._v(" "),s("blockquote",[s("p",[t._v("我们在单机服务器，出现资源的竞争，一般使用synchronized 就可以解决，但是在分布式的服务器上，synchronized 就无法解决这个问题，这就需要一个分布式事务锁。")]),t._v(" "),s("p",[t._v("除此之外面试，基本会问springboot、Redis，然后都会一路再聊到分布式事务、分布式事务锁的实现。")])]),t._v(" "),s("h2",{attrs:{id:"_1、常见的分布式事务锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、常见的分布式事务锁"}},[t._v("#")]),t._v(" 1、常见的分布式事务锁")]),t._v(" "),s("p",[t._v("1、数据库级别的锁")]),t._v(" "),s("ul",[s("li",[t._v("乐观锁，基于加入版本号实现")]),t._v(" "),s("li",[t._v("悲观锁，基于数据库的 for update 实现")])]),t._v(" "),s("p",[t._v("2、Redis ，基于 SETNX、EXPIRE 实现")]),t._v(" "),s("p",[t._v("3、Zookeeper，基于InterProcessMutex 实现")]),t._v(" "),s("p",[t._v("4、Redisson，lcok、tryLock（背后原理也是Redis）")]),t._v(" "),s("p",[t._v("本文主要介绍一下Redis和Redisson的分布式事务锁的原理。")]),t._v(" "),s("h2",{attrs:{id:"_2、redis-搭建模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、redis-搭建模式"}},[t._v("#")]),t._v(" 2、Redis 搭建模式")]),t._v(" "),s("p",[t._v("这也简单讲一下，毕竟可能有小伙伴不知道Redis的几种架构。")]),t._v(" "),s("p",[t._v("我们使用 Redis ，有以下几种搭建方式：")]),t._v(" "),s("ul",[s("li",[t._v("单机")]),t._v(" "),s("li",[t._v("主从")]),t._v(" "),s("li",[t._v("哨兵")]),t._v(" "),s("li",[t._v("集群")])]),t._v(" "),s("blockquote",[s("p",[t._v("单机，只要一台Redis服务器，挂了就无法工作了")]),t._v(" "),s("p",[t._v("主从，是备份关系， 数据也会同步到从库，还可以读写分离")]),t._v(" "),s("p",[t._v("哨兵：master挂了，哨兵就行选举，选出新的master，作用是监控主从，主从切换")]),t._v(" "),s("p",[t._v("集群：高可用，分散请求。目的是将数据分片存储，节省内存。")])]),t._v(" "),s("p",[s("strong",[t._v("单机：")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://blog-1253198264.cos.ap-guangzhou.myqcloud.com/image-20201019180304613.png",alt:"单机模式"}})]),t._v(" "),s("p",[s("strong",[t._v("主从：")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://blog-1253198264.cos.ap-guangzhou.myqcloud.com/image-20201019180406853.png",alt:"主从模式"}})]),t._v(" "),s("p",[s("strong",[t._v("哨兵：")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://blog-1253198264.cos.ap-guangzhou.myqcloud.com/image-20201019180436917.png",alt:"哨兵模式"}})]),t._v(" "),s("p",[s("strong",[t._v("集群：")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://blog-1253198264.cos.ap-guangzhou.myqcloud.com/image-20201019180647650.png",alt:"集群模式"}})]),t._v(" "),s("h2",{attrs:{id:"_3、几个概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、几个概念"}},[t._v("#")]),t._v(" 3、几个概念")]),t._v(" "),s("p",[s("strong",[t._v("分布式")]),t._v("：简单来说就是将业务进行拆分，部署到不同的机器来协调处理。比如用户在网上买东西，大致分为：订单系统、库存系统、支付系统、、、、这些系统共同来完成用户买东西这个业务操作。")]),t._v(" "),s("p",[s("strong",[t._v("集群")]),t._v("：同一个业务，通过部署多个实例来完成，保证应用的高可用，如果其中某个实例挂了，业务仍然可以正常进行，通常集群和分布式配合使用。来保证系统的高可用、高性能。")]),t._v(" "),s("p",[s("strong",[t._v("分布式事务")]),t._v("：按照传统的系统架构，下单、扣库存等等，这一系列的操作都是一在一个应用一个数据库中完成的，也就是说保证了事务的ACID特性。如果在分布式应用中就会涉及到跨应用、跨库。这样就涉及到了分布式事务，就要考虑怎么保证这一系列的操作要么都成功要么都失败。保证数据的一致性。")]),t._v(" "),s("p",[t._v("**分布式锁：**因为资源有限，要通过互斥来保持一致性，引入分布式事务锁。")]),t._v(" "),s("h2",{attrs:{id:"_4、redis分布式锁原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、redis分布式锁原理"}},[t._v("#")]),t._v(" 4、Redis分布式锁原理")]),t._v(" "),s("p",[s("strong",[t._v("简单的来说，其实现原理如下：")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("互斥性")]),t._v(" "),s("p",[t._v("保证同一时间只有一个客户端可以拿到锁。")])]),t._v(" "),s("li",[s("p",[t._v("安全性")]),t._v(" "),s("p",[t._v("只有加锁的服务才能有解锁权限，也就是不能让客户端A加的锁，客户端B、C 都可以解锁。")])]),t._v(" "),s("li",[s("p",[t._v("避免死锁")])]),t._v(" "),s("li",[s("p",[t._v("保证加锁与解锁操作是原子性操作")]),t._v(" "),s("blockquote",[s("p",[t._v("这个其实属于是实现分布式锁的问题，假设a用redis实现分布式锁")])])])]),t._v(" "),s("blockquote",[s("p",[t._v("假设加锁操作，操作步骤分为两步："),s("strong",[t._v("1，设置key set（key，value）  2，给key设置过期时间")])]),t._v(" "),s("p",[t._v("假设现在a刚实现set加锁后，程序崩了就导致了没给key设置过期时间，这样就导致key一直存在就发生了死锁，这就不是原子操作了。（而下面的命令借助lua就可以解决）")])]),t._v(" "),s("p",[t._v("讲了这么多，Redis实现分布式锁的核心就是：")]),t._v(" "),s("p",[s("strong",[t._v("加锁：")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("SET key value NX EX timeOut\n")])])]),s("p",[t._v("参数解释：")]),t._v(" "),s("blockquote",[s("p",[t._v("NX：只有这个key不存在的时候才会进行操作，即 if not exists；\nEX：设置key的过期时间为秒，具体时间由第5个参数决定\ntimeOut：设置过期时间保证不会出现死锁【避免宕机死锁】")])]),t._v(" "),s("p",[t._v("代码实现："),s("strong",[t._v("（一气呵成，原子操作，避免加锁设置时间不同步）")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),t._v(" timeOut"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" var1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" jedis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"NX"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"EX"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("timeOut"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//加锁，设置超时时间 原子性操作")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("LOCK_SUCCESS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("var1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("总的来说，执行上面的set()方法就只会导致两种结果：")]),t._v(" "),s("ol",[s("li",[t._v("当前没有锁（key不存在），那么就进行加锁操作，并对锁设置个有效期，同时value表示加锁的客户端。")]),t._v(" "),s("li",[t._v("已有锁存在，不做任何操作。")])]),t._v(" "),s("blockquote",[s("p",[t._v("注：从2.6.12版本后, 就可以使用set来获取锁、Lua 脚本来释放锁。setnx是以前刚开始的实现方式，set命令nx、xx等参数,，就是为了实现 setnx 的功能。")])]),t._v(" "),s("p",[s("strong",[t._v("解锁：")])]),t._v(" "),s("p",[t._v("代码实现：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("redisUnLock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" luaScript "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"if redis.call('get',KEYS[1]) == ARGV[1] then return redis.call('del',KEYS[1]) else  return 0 end\"")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v('"\n\n    '),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" var2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" jedis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("eval")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("luaScript"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collections")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("singletonList")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collections")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("singletonList")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UNLOCK_SUCCESS "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" var2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("这段lua代码的意思：首先获取锁对应的value值，检查是否与输入的value相等，如果相等则删除锁（解锁）。")])]),t._v(" "),s("p",[t._v("这两个加锁解锁，就能实现上面说的什么原子性、互斥性 ，达到“锁”的功效，就好像你单机使用 "),s("code",[t._v("synchronized")]),t._v(" 一样。")]),t._v(" "),s("p",[t._v("上面加锁、解锁，看着是挺麻烦的，而且还必须设置锁的过期时间；不然死机了，恰好你的锁还没释放，就GG了，所以就出现了Redisson。")]),t._v(" "),s("p",[t._v("而且还有一个问题，就是Redis加锁和解锁")]),t._v(" "),s("h2",{attrs:{id:"_5、redisson-分布式锁原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5、redisson-分布式锁原理"}},[t._v("#")]),t._v(" 5、Redisson 分布式锁原理")]),t._v(" "),s("p",[t._v("官方介绍：")]),t._v(" "),s("blockquote",[s("p",[t._v("Redisson是一个在Redis的基础上实现的Java驻内存数据网格。")])]),t._v(" "),s("p",[t._v("就是在Redis的基础上封装了很多功能，以便于我们更方便的使用。")]),t._v(" "),s("p",[t._v("只需要三行代码：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RLock")]),t._v(" lock "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" redisson"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getLock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"myLock"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//加锁")]),t._v("\nlock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("unlock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//解锁")]),t._v("\n")])])]),s("h4",{attrs:{id:"_1-加锁机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-加锁机制"}},[t._v("#")]),t._v(" (1)加锁机制")]),t._v(" "),s("p",[s("strong",[t._v("加锁流程：")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://blog-1253198264.cos.ap-guangzhou.myqcloud.com/image-20201020143140251.png",alt:"redisson的lock过程"}})]),t._v(" "),s("p",[t._v("redisson的"),s("code",[t._v("lock()、tryLock()方法")]),t._v(" 底层 其实是发送一段lua脚本到一台服务器：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("redis.call"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'exists'")]),t._v(" KEYS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("  +  --  exists 判断key是否存在\n       redis.call"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hset'")]),t._v(" KEYS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" ARGV"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  +   --如果不存在，hset存哈希表\n       redis.call"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pexpire'")]),t._v(" KEYS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" ARGV"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  + --设置过期时间\n       "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("return")]),t._v(" nil"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  +                            -- 返回null 就是加锁成功\n          end"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  +\n          "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("redis.call"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hexists'")]),t._v(" KEYS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" ARGV"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("  + -- 如果key存在，查看哈希表中是否存在"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("当前线程"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n              redis.call"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hincrby'")]),t._v(" KEYS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" ARGV"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  + -- 给哈希中的key加1，代表重入1次，以此类推\n              redis.call"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pexpire'")]),t._v(" KEYS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" ARGV"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  + -- 重设过期时间\n              "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("return")]),t._v(" nil"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  +\n          end"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  +\n          "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("return")]),t._v(" redis.call"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pttl'")]),t._v(" KEYS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" --如果前面的if都没进去，说明ARGV"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("的值不同，也就是不是同一线程的锁，这时候直接返回该锁的过期时间\n\n")])])]),s("p",[t._v("参数解释：")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("KEYS[1]：即加锁的key，")]),s("code",[t._v('RLock lock = redisson.getLock("myLock")')]),t._v("; 中的myLock")]),t._v(" "),s("p",[s("strong",[t._v("ARGV[1]：即 TimeOut")]),t._v(" 锁key的默认生存时间，默认30秒")]),t._v(" "),s("p",[t._v("**ARGV[2]：**代表的是加锁的客户端的ID，类似于这样的："),s("code",[t._v("99ead457-bd16-4ec0-81b6-9b7c73546469:1")])])]),t._v(" "),s("p",[t._v("其中lock()默认是30秒的生存时间。")]),t._v(" "),s("h4",{attrs:{id:"_2-锁互斥"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-锁互斥"}},[t._v("#")]),t._v(" （2）锁互斥")]),t._v(" "),s("p",[t._v("假如客户端A已经拿到了 "),s("code",[t._v("myLock")]),t._v("，现在 有一客户端（未知） 想进入：")]),t._v(" "),s("p",[t._v("1、第一个if判断会执行“"),s("code",[t._v("exists myLock")]),t._v("”，发现myLock这个锁key已经存在了。")]),t._v(" "),s("p",[t._v("2、第二个if判断，判断一下，"),s("code",[t._v("myLock")]),t._v("锁key的hash数据结构中， 如果是客户端A重新请求，证明当前是同一个客户端同一个线程重新进入，所以可从入标志+1，重新刷新生存时间（可重入）； 否则进入下一个if。")]),t._v(" "),s("p",[t._v("3、第三个if判断，客户端B 会获取到"),s("code",[t._v("pttl myLock")]),t._v("返回的一个数字，这个数字代表了"),s("code",[t._v("myLock")]),t._v("这个锁key的剩余生存时间。比如还剩15000毫秒的生存时间。")]),t._v(" "),s("p",[t._v("此时客户端B会进入一个while循环，不停的尝试加锁。")]),t._v(" "),s("h4",{attrs:{id:"_3-watch-dog-看门狗自动延期机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-watch-dog-看门狗自动延期机制"}},[t._v("#")]),t._v(" （3）watch dog 看门狗自动延期机制")]),t._v(" "),s("p",[t._v("官方介绍：")]),t._v(" "),s("blockquote",[s("p",[t._v("lockWatchdogTimeout（监控锁的看门狗超时，单位：毫秒）")]),t._v(" "),s("p",[t._v("默认值：30000")]),t._v(" "),s("p",[t._v("监控锁的看门狗超时时间单位为毫秒。该参数只适用于分布式锁的加锁请求中"),s("strong",[t._v("未明确使用leaseTimeout参数的情况")]),t._v("。(如果设置了"),s("strong",[t._v("leaseTimeout那就会自动失效了呀~")]),t._v(")")])]),t._v(" "),s("p",[t._v("看门狗的时间可以自定义设置：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setLockWatchdogTimeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("看门狗有什么用呢？")])]),t._v(" "),s("p",[t._v("假如客户端A在超时时间内还没执行完毕怎么办呢？ redisson于是提供了这个看门狗，如果还没执行完毕，监听到这个客户端A的线程还持有锁，就去续期，默认是  LockWatchdogTimeout/ 3 即 10 秒监听一次，如果还持有，就不断的延长锁的有效期（重新给锁设置过期时间，30s）")]),t._v(" "),s("p",[t._v("可以在lock的参数里面指定：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("lock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果不设置，默认的生存时间是30s，启动看门狗 ")]),t._v("\nlock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("SECONDS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//10秒以后自动解锁，不启动看门狗，锁到期不续")]),t._v("\n")])])]),s("p",[t._v("如果是使用了可重入锁（  "),s("strong",[t._v("leaseTimeout")]),t._v("）：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("lock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("tryLock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果不设置，默认的生存时间是30s，启动看门狗 ")]),t._v("\nlock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("tryLock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("SECONDS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//尝试加锁最多等待100秒，上锁以后10秒自动解锁，不启动看门狗")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("这里的第二个参数"),s("strong",[t._v("leaseTimeout")]),t._v(" 设置为 10 就会覆盖 看门狗的设置（看门狗无效），在10秒后锁就自动失效，不会去续期；如果是 -1 ，就表示 使用看门狗的默认值。")])]),t._v(" "),s("h4",{attrs:{id:"_4-释放锁机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-释放锁机制"}},[t._v("#")]),t._v(" （4）释放锁机制")]),t._v(" "),s("p",[t._v("lock.unlock()，就可以释放分布式锁。就是每次都对myLock数据结构中的那个加锁次数减1。")]),t._v(" "),s("p",[t._v("如果发现加锁次数是0了，说明这个客户端已经不再持有锁了，此时就会用：“"),s("code",[t._v("del myLock")]),t._v("”命令，从redis里删除这个key。")]),t._v(" "),s("p",[t._v("为了安全，会先校验是否持有锁再释放，防止")]),t._v(" "),s("ul",[s("li",[t._v("业务执行还没执行完，锁到期了。（此时没占用锁，再unlock就会报错）")]),t._v(" "),s("li",[t._v("主线程异常退出、或者假死")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rLock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isLocked")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rLock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isHeldByCurrentThread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    rLock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("unlock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"_5-缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-缺点"}},[t._v("#")]),t._v(" （5） 缺点")]),t._v(" "),s("p",[t._v("如果是 主从、哨兵模式，当客户端A 把 "),s("code",[t._v("myLock")]),t._v("这个锁 "),s("code",[t._v("key")]),t._v(" 的"),s("code",[t._v("value")]),t._v("写入了 "),s("code",[t._v("master")]),t._v("，此时会异步复制给"),s("code",[t._v("slave")]),t._v("实例。")]),t._v(" "),s("p",[t._v("万一在这个主从复制的过程中 "),s("code",[t._v("master")]),t._v(" 宕机了，主备切换，"),s("code",[t._v("slave")]),t._v(" 变成了"),s("code",[t._v("master")]),t._v("。")]),t._v(" "),s("p",[t._v("那么这个时候 "),s("code",[t._v("slave")]),t._v("还没来得及加锁，此时 客户端A的"),s("code",[t._v("myLock")]),t._v("的 值是没有的，客户端B在请求时，"),s("code",[t._v("myLock")]),t._v("却成功为自己加了锁。这时候分布式锁就失效了，就会导致数据有问题。")]),t._v(" "),s("p",[t._v("所以说Redis分布式说最大的缺点就是"),s("strong",[t._v("宕机")]),t._v("导致多个客户端加锁，导致脏数据，不过这种几率还是很小的。")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("以上说了这么多，redisson还是挺好用的，也是现在很多行业的解决方案，如果你想知道怎么用，可以参考我的另外一篇文章，用redisson模拟一个秒杀："),s("a",{attrs:{href:"https://purejava.baimuxym.cn/#/articles%5CRedis%5CRedis%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E9%94%81%E7%9A%84%E7%A7%92%E6%9D%80%E3%80%81%E8%B6%85%E5%8D%96%E7%AE%80%E5%8D%95%E4%BE%8B%E5%AD%90.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redis分布式事务锁的秒杀、超卖简单例子"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("参考：")]),t._v(" "),s("ul",[s("li",[t._v("https://www.cnblogs.com/demingblog/p/10295236.html")]),t._v(" "),s("li",[t._v("http://www.voidcc.com/redisson/redisson-single-sentinel-mode-configuration")]),t._v(" "),s("li",[t._v("https://juejin.im/post/6844903874675867656")])])])}),[],!1,null,null,null);s.default=e.exports}}]);