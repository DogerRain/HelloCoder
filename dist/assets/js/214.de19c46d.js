(window.webpackJsonp=window.webpackJsonp||[]).push([[214],{621:function(t,e,s){"use strict";s.r(e);var a=s(7),n=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"deque是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#deque是什么"}},[t._v("#")]),t._v(" Deque是什么")]),t._v(" "),e("p",[e("strong",[t._v("Java堆栈Stack类已经过时，Java官方推荐使用"),e("code",[t._v("Deque")]),t._v("替代Stack使用。")])]),t._v(" "),e("p",[t._v("Deque是一个"),e("strong",[t._v("双端队列接口")]),t._v("，继承自Queue接口，Deque的实现类是LinkedList、ArrayDeque、LinkedBlockingDeque，其中LinkedList是最常用的。")]),t._v(" "),e("blockquote",[e("p",[t._v("双向操作，即Deque会更灵活一点，它两端都可以进出，"),e("strong",[t._v("集合了Stack和Queue的共同点")])])]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Deque")]),t._v(" deque "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedList")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("Deque是一个线性collection，支持在两端插入和移除元素。名称 deque 是“double ended queue（双端队列）”的缩写，通常读为“deck”。")]),t._v(" "),e("p",[t._v("大多数 Deque 实现对于它们能够包含的元素数没有固定限制，但此接口既支持有容量限制的双端队列，也支持没有固定大小限制的双端队列。")]),t._v(" "),e("p",[t._v("此接口定义在双端队列两端访问元素的方法。提供插入、移除和检查元素的方法。")]),t._v(" "),e("p",[t._v("每种方法都存在两种形式：")]),t._v(" "),e("ul",[e("li",[t._v("一种形式在操作失败时抛出异常")]),t._v(" "),e("li",[t._v("另一种形式返回一个特殊值（null 或 false，具体取决于操作）。")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/DogerRain/image@main/img-20210401/image-20210512103923684.png",alt:""}})]),t._v(" "),e("p",[t._v("举个例子你就明白了：")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Deque")]),t._v(" deque "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedList")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 以下这两个方法一样，只是通过名字区分")]),t._v("\ndeque"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("peek")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回特殊值 null")]),t._v("\ndeque"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("peekFirst")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回特殊值 null")]),t._v("\ndeque"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getFirst")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//抛出错误 NoSuchElementException")]),t._v("\n")])])]),e("p",[e("strong",[t._v("下面是Deque的一些API以及 汇集了 队列、栈的替代方法：")])]),t._v(" "),e("h3",{attrs:{id:"_1、与队列一样的fifo-先进先出-行为"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、与队列一样的fifo-先进先出-行为"}},[t._v("#")]),t._v(" 1、与队列一样的FIFO（先进先出）行为：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[e("strong",[t._v("Queue方法")])]),t._v(" "),e("th",[e("strong",[t._v("等效Deque方法")])])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("add add(e)")]),t._v(" "),e("td",[t._v("addLast(e)")])]),t._v(" "),e("tr",[e("td",[t._v("offer(e)")]),t._v(" "),e("td",[t._v("offerLast(e)")])]),t._v(" "),e("tr",[e("td",[t._v("remove()")]),t._v(" "),e("td",[t._v("removeFirst()")])]),t._v(" "),e("tr",[e("td",[t._v("poll()")]),t._v(" "),e("td",[t._v("pollFirst()")])]),t._v(" "),e("tr",[e("td",[t._v("element()")]),t._v(" "),e("td",[t._v("getFirst()")])]),t._v(" "),e("tr",[e("td",[t._v("peek()")]),t._v(" "),e("td",[t._v("peekFirst()")])])])]),t._v(" "),e("h3",{attrs:{id:"_2、与栈一样的-lifo-后进先出-行为"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、与栈一样的-lifo-后进先出-行为"}},[t._v("#")]),t._v(" 2、与栈一样的 LIFO（后进先出）行为：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[e("strong",[t._v("Stack方法")])]),t._v(" "),e("th",[e("strong",[t._v("等效Deque方法")])])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("push(e)")]),t._v(" "),e("td",[t._v("addFirst(e)")])]),t._v(" "),e("tr",[e("td",[t._v("pop()")]),t._v(" "),e("td",[t._v("removeFirst()")])]),t._v(" "),e("tr",[e("td",[t._v("peek()")]),t._v(" "),e("td",[t._v("peekFirst()")])])])]),t._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结：")]),t._v(" "),e("p",[t._v("简而言之，这是一个队列、又是一个栈，即保留了栈的操作方法、又保留了队列的方法，但是又引入了自己的方法名（更容易理解，比如 队列的"),e("code",[t._v("element()")]),t._v("方法是是什么意思一般很难想起来，但是Deque用了"),e("code",[t._v("removeFirst()")]),t._v("这个名字替代，就很显而易见了）")])])}),[],!1,null,null,null);e.default=n.exports}}]);