(window.webpackJsonp=window.webpackJsonp||[]).push([[121],{535:function(t,a,v){"use strict";v.r(a);var r=v(7),e=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("据我所面试的经验，面试官考察的算法主要分为三派：")]),t._v(" "),a("ul",[a("li",[t._v("0考察（一般是面向实习生的小公司）")]),t._v(" "),a("li",[t._v("Java集合+排序算法（中小公司CURD，面向业务开发）")]),t._v(" "),a("li",[t._v("LeetCode的算法（大公司，一二线大厂）")])]),t._v(" "),a("p",[t._v("恰好我都面试过这三种类型的公司。")]),t._v(" "),a("p",[a("strong",[t._v("小公司不一定考算法，但是大公司一定考算法。")])]),t._v(" "),a("p",[t._v("我也遇到过小公司出LeetCode的题目，一般是 简单 级别的，可能面试官为了看看我的能力上限在哪里。")]),t._v(" "),a("p",[t._v("另外就是大公司的算法一般都有2~3道，做出1道基本就是有戏。")]),t._v(" "),a("p",[t._v("下面来详细讲讲这三种情况。")]),t._v(" "),a("h2",{attrs:{id:"_1、0考察-小公司"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、0考察-小公司"}},[t._v("#")]),t._v(" 1、0考察-小公司")]),t._v(" "),a("blockquote",[a("p",[t._v("一般就几个开发那种，招实习生或者一年工作经验的")])]),t._v(" "),a("p",[t._v("这种特别小的公司，一般不问算法，基本会问一下Java的集合，比如HashMap、List、Set、数组这些有没有用过，各自的特点是什么。")]),t._v(" "),a("p",[t._v("所以这种一般就不需要算法基础了，本来公司业务也没有用到。")]),t._v(" "),a("p",[t._v("如果你不知道Java的集合为何物，可以参考：")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://purejava.baimuxym.cn/#/articles%5CJava%E8%BF%9B%E9%98%B6%5C%E9%9B%86%E5%90%88%5C%E9%9B%86%E5%90%88%E7%B1%BB%E7%9A%84%E4%BB%8B%E7%BB%8D",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java的集合介绍"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"_2、中小公司"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、中小公司"}},[t._v("#")]),t._v(" 2、中小公司")]),t._v(" "),a("p",[t._v("这种公司一般开发团队在20~50人左右，有时候面试官比较喜欢刁难人，不止于Java集合的简单用法，还有会问到HashMap的扩容、jdk1.8红黑树情况、currentHashMap、安全、LinkedList和ArrayList的区别 这些问题，问的比较深入，基本上都是八股文。")]),t._v(" "),a("p",[t._v("还有就是排序算法，其中快速排序尤其喜欢问，可以看一下这两块内容：")]),t._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/01.LearnJavaToFindAJob/03.【中级】12k-26k档/算法/articles\\Java基础\\Java集合类面试题.html"}},[t._v("Java集合类面试题")])],1),t._v(" "),a("li",[a("RouterLink",{attrs:{to:"/01.LearnJavaToFindAJob/03.【中级】12k-26k档/算法/articles\\算法\\八大排序算法.html"}},[t._v("八大排序算法")])],1)]),t._v(" "),a("p",[t._v("一般情况下是不会出LeetCode的算法题，再不然就是 两数之和、二叉树遍历了。")]),t._v(" "),a("h2",{attrs:{id:"_3、大公司"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、大公司"}},[t._v("#")]),t._v(" 3、大公司")]),t._v(" "),a("p",[t._v("大公司的算法是必考的，基本上还是手写那种，题目的来源主要是：")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("LeetCode")])]),t._v(" "),a("p",[t._v("LeetCode的 hot100 刷一次差不多了。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("《剑指offer》")])]),t._v(" "),a("p",[t._v("这本书上的题目基本都会在LeetCode找到，所以看LeetCode就知道了")])])]),t._v(" "),a("blockquote",[a("p",[t._v("注：如果你不是要进一二线大厂，是不需要啃LeetCode的")])]),t._v(" "),a("p",[t._v("借助topcc网站、牛客网、收集各大博客、大厂的算法笔试题的统计，我总结了一下大厂最喜欢考的算法题，并且分类好了")]),t._v(" "),a("blockquote",[a("p",[t._v("注：题解大部分来自于LeetCode，都有标注原题和作者，外加自己的理解总结的，如果侵犯了各位的利益，烦请告知，奥利给！")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/DogerRain/image@main/img-20210401/image-20210420142909384.png",alt:""}})]),t._v(" "),a("h4",{attrs:{id:"字符串-辅助map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串-辅助map"}},[t._v("#")]),t._v(" 字符串(辅助Map)：")]),t._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/01.LearnJavaToFindAJob/03.【中级】12k-26k档/算法/articles\\算法\\1-两数之和.html"}},[t._v("1-两数之和")])],1),t._v(" "),a("li",[a("RouterLink",{attrs:{to:"/01.LearnJavaToFindAJob/03.【中级】12k-26k档/算法/articles\\算法\\2两数相加.html"}},[t._v("2-两数相加")])],1),t._v(" "),a("li",[a("RouterLink",{attrs:{to:"/01.LearnJavaToFindAJob/03.【中级】12k-26k档/算法/articles\\算法\\387-字符串中的第一个唯一字符.html"}},[t._v("387-字符串中的第一个唯一字符")])],1),t._v(" "),a("li",[a("RouterLink",{attrs:{to:"/01.LearnJavaToFindAJob/03.【中级】12k-26k档/算法/articles\\算法\\20-有效的括号.html"}},[t._v("20-有效的括号")])],1),t._v(" "),a("li")]),t._v(" "),a("h4",{attrs:{id:"链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链表"}},[t._v("#")]),t._v(" 链表：")]),t._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/01.LearnJavaToFindAJob/03.【中级】12k-26k档/算法/articles\\算法\\19-删除链表的倒数第N个结点.html"}},[t._v("19-删除链表的倒数第N个结点")])],1),t._v(" "),a("li",[a("RouterLink",{attrs:{to:"/01.LearnJavaToFindAJob/03.【中级】12k-26k档/算法/articles\\算法\\206-翻转链表.html"}},[t._v("206-翻转链表")])],1),t._v(" "),a("li",[a("RouterLink",{attrs:{to:"/01.LearnJavaToFindAJob/03.【中级】12k-26k档/算法/articles\\算法\\141环形链表.html"}},[t._v("141环形链表")])],1),t._v(" "),a("li",[a("RouterLink",{attrs:{to:"/01.LearnJavaToFindAJob/03.【中级】12k-26k档/算法/articles\\算法\\234回文链表.html"}},[t._v("234回文链表")])],1),t._v(" "),a("li")]),t._v(" "),a("h4",{attrs:{id:"树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树"}},[t._v("#")]),t._v(" 树：")]),t._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/01.LearnJavaToFindAJob/03.【中级】12k-26k档/算法/articles\\算法\\543二叉树最大直径.html"}},[t._v("543-二叉树最大直径")])],1)]),t._v(" "),a("h4",{attrs:{id:"动态规划"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态规划"}},[t._v("#")]),t._v(" 动态规划：")]),t._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/01.LearnJavaToFindAJob/03.【中级】12k-26k档/算法/articles\\算法\\70-爬楼梯.html"}},[t._v("70-爬楼梯")])],1),t._v(" "),a("li",[a("RouterLink",{attrs:{to:"/01.LearnJavaToFindAJob/03.【中级】12k-26k档/算法/articles\\算法\\53-连续最大子序和.html"}},[t._v("53-连续最大子序和")])],1)]),t._v(" "),a("h4",{attrs:{id:"回溯"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回溯"}},[t._v("#")]),t._v(" 回溯：")]),t._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/01.LearnJavaToFindAJob/03.【中级】12k-26k档/算法/articles\\算法\\46-全排列.html"}},[t._v("46-全排列")])],1),t._v(" "),a("li")])])}),[],!1,null,null,null);a.default=e.exports}}]);