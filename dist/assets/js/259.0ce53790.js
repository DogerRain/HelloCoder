(window.webpackJsonp=window.webpackJsonp||[]).push([[259],{662:function(s,t,a){"use strict";a.r(t);var e=a(7),r=Object(e.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"_1、什么是-sds"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、什么是-sds"}},[s._v("#")]),s._v(" 1、什么是 SDS？")]),s._v(" "),t("p",[t("code",[s._v("Redis")]),s._v("的"),t("code",[s._v("String")]),s._v("数据结构底层实现是基于"),t("code",[s._v("SDS")]),s._v("实现的。")]),s._v(" "),t("p",[s._v("而"),t("code",[s._v("Redis")]),s._v("是用"),t("code",[s._v("C")]),s._v("语言开发的，Redis底层并没有采用C语言传统的字符串表示，即以空字符结尾的字符数组，而是采用专门为其设计的简单动态字符串作为其默认字符串表示，其英文全称为Simple Dynamic String，简称SDS。")]),s._v(" "),t("h2",{attrs:{id:"_2、sds-定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、sds-定义"}},[s._v("#")]),s._v(" 2、SDS 定义")]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("sdshdr")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//记录buff数组中已使用字节的数量 等于sds所保存字符串长度")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" len"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//记录buff数组中未使用字节的数量")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" free"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//字节数组，保存字符串")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" buf"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("类似于Java的字符串String，String也是通过 char[]（JDK 1.8） 存储字符。")]),s._v(" "),t("p",[s._v("SDS 和C的字符串一样，也是以"),t("code",[s._v("'\\0'")]),s._v("表示结束，这一个字节不会计入已使用的长度. 这样做的好处是可以重用C字符串函数库里面的一部分函数。")]),s._v(" "),t("p",[s._v("如：")]),s._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6379")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" set name "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"HelloCoder"')]),s._v("\n")])])]),t("p",[s._v("在Redis的底层中其实是这样存储的：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://blog-1253198264.cos.ap-guangzhou.myqcloud.com/image-20210222103537364.png",alt:""}})]),s._v(" "),t("blockquote",[t("p",[s._v("此时键值对的"),t("code",[s._v("key")]),s._v("和"),t("code",[s._v("value")]),s._v("都是一个字符串对象，而对象的底层实现分别是两个保存着字符串"),t("code",[s._v("name")]),s._v("和"),t("code",[s._v("HelloCoder")]),s._v("的"),t("code",[s._v("SDS")]),s._v("结构。")])]),s._v(" "),t("h2",{attrs:{id:"_3、sds-与-c字符串区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、sds-与-c字符串区别"}},[s._v("#")]),s._v(" 3、SDS 与 C字符串区别")]),s._v(" "),t("p",[s._v("这里主要是讲述一下SDS相比C字符串的优势，也是SDS比C语言字符串的更加适用Redis的原因。")]),s._v(" "),t("h4",{attrs:{id:"_3-1、获取字符串长度时间复杂度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1、获取字符串长度时间复杂度"}},[s._v("#")]),s._v(" 3.1、获取字符串长度时间复杂度")]),s._v(" "),t("p",[s._v("C字符串需要遍历，时间复杂度为"),t("code",[s._v("O(n)")]),s._v("。")]),s._v(" "),t("p",[s._v("SDS直接获取， 时间复杂度为"),t("code",[s._v("O(1)")]),s._v("，因为有 len 函数记录字符串长度。")]),s._v(" "),t("h4",{attrs:{id:"_3-2、-防止缓冲区溢出"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2、-防止缓冲区溢出"}},[s._v("#")]),s._v(" 3.2、 防止缓冲区溢出")]),s._v(" "),t("p",[s._v("C语言不记录自身长度，字符串在执行拼接字符串时，如果长度不够会产生缓冲区溢出的问题。")]),s._v(" "),t("blockquote",[t("p",[t("code",[s._v("/strcat")]),s._v(" 函数可以将 "),t("code",[s._v("src")]),s._v(" 字符串中的内容拼接到 "),t("code",[s._v("dest")]),s._v(" 字符串的末尾：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("char *strcat(char *dest, const char *src);\n")])])])]),s._v(" "),t("p",[s._v("SDS的空间分配策略完全杜绝了这种可能性，当API需要对SDS进行修改时，  API会首先会检查SDS的空间是否满足条件, 如果不满足， API会自动对它的空间动态扩展。")]),s._v(" "),t("h4",{attrs:{id:"_3-3、减少修改字符串带来的内存重分配次数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3、减少修改字符串带来的内存重分配次数"}},[s._v("#")]),s._v(" 3.3、减少修改字符串带来的内存重分配次数")]),s._v(" "),t("p",[s._v("C字符串的长度和底层数组的长度之间存在着关联性，每次增加或缩小一个C字符串，程序都"),t("strong",[s._v("必须")]),s._v("对C字符串的数据进行内存重分配操作，否则会出现内存泄漏。")]),s._v(" "),t("p",[s._v("由于Redis频繁操作数据，内存分配和释放耗时可能对性能造成影响,，SSD避免了这种缺陷,，实现空间预分配和惰性空间释放两种优化策略，不是每次都要重新分配内存。")]),s._v(" "),t("h5",{attrs:{id:"_1-空间预分配"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-空间预分配"}},[s._v("#")]),s._v(" 1.空间预分配")]),s._v(" "),t("blockquote",[t("p",[s._v("以下参考自《redis设计与实现》")])]),s._v(" "),t("p",[s._v("这是SDS分配空间的伪代码：")]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[s._v("def "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sdsMakeRoomFor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sdshdr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" required_len"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n\n    # 预分配空间足够，无须再进行空间分配\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sdshdr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("free "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" required_len"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" sdshdr\n\n    # 计算新字符串的总长度\n    newlen "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" sdshdr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("len "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" required_len\n\n    # 如果新字符串的总长度小于 SDS_MAX_PREALLOC "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" SDS_MAX_PREALLOC 的值为 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 即"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("M\n    # 那么为字符串分配 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" 倍于所需长度的空间\n    # 否则就分配所需长度加上 SDS_MAX_PREALLOC 数量的空间\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" newlen "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" SDS_MAX_PREALLOC"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        newlen "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        newlen "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" SDS_MAX_PREALLOC\n\n    # 分配内存\n    newsh "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("zrelloc")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sdshdr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("sizeof")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("sdshdr")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" newlen "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n    # 更新 free 属性\n    newsh"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("free "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" newlen "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" sdshdr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("len\n\n    # 返回\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" newsh\n")])])]),t("p",[s._v("总结就是：")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("len长度小于 1 M")])])]),s._v(" "),t("p",[s._v("如果修改后len长度小于 1 M，这时分配给"),t("code",[s._v("free")]),s._v("的大小和len一样,，例如修改过后为10字节,  那么给"),t("code",[s._v("free")]),s._v("也是10字节（未使用空间） ，buf实际长度变成了  "),t("code",[s._v("10 byte+ 10 byte + 1byte")])]),s._v(" "),t("blockquote",[t("p",[s._v("1byte  是结尾的"),t("code",[s._v("'\\0'")])])]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("len长度将大于等于1 M")])])]),s._v(" "),t("p",[s._v("如果修改后"),t("code",[s._v("len")]),s._v("长度大于等于1 M, 这时分配给"),t("code",[s._v("free")]),s._v("的长度为 1 M,   例如修改过后为10M（即newlen的值），  那么给"),t("code",[s._v("free")]),s._v("是1M 。 buf实际长度变成了 "),t("code",[s._v("10M + 1M + 1 byte")]),s._v("。")]),s._v(" "),t("p",[s._v("在修改时，首先检查空间是不是够，如果足够，直接使用，否则执行内存重分配。")]),s._v(" "),t("h5",{attrs:{id:"_2、惰性空间释放"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、惰性空间释放"}},[s._v("#")]),s._v(" 2、惰性空间释放")]),s._v(" "),t("p",[s._v("当缩短SDS长度时，Redis不进行内存释放，而是记录到"),t("code",[s._v("free")]),s._v("字段中， 等待下次使用。 与此同时，也提供相应的API，可以手动释放内存。")]),s._v(" "),t("p",[s._v("比如说此前：")]),s._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6379")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" set name "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"HelloCoder"')]),s._v("\n")])])]),t("p",[s._v("name 的 "),t("code",[s._v("len")]),s._v(" 等于 10，现在修改为")]),s._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6379")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" set name "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"HaC"')]),s._v("\n")])])]),t("p",[s._v("此时 "),t("code",[s._v("len")]),s._v(" 就变为 3，"),t("code",[s._v("free")]),s._v("此时就保存为17 （10 + 10 - 3 = 17）。")]),s._v(" "),t("blockquote",[t("p",[s._v("第一个10是原来就有的free大小")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://blog-1253198264.cos.ap-guangzhou.myqcloud.com/image-20210222141751272.png",alt:""}})]),s._v(" "),t("h4",{attrs:{id:"_3-4、二进制安全"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-4、二进制安全"}},[s._v("#")]),s._v(" 3.4、二进制安全")]),s._v(" "),t("p",[s._v("C字符串只有末尾能保存空格， 中间如果有空格（空字符将被误认为是字符串结尾）会被截取认作结束标识，这样就不能保存图片,，音频视频等二进制数据了。")]),s._v(" "),t("p",[s._v("比如说保存特殊字符串，转成二进制的字节 :  保留的数据中间出现了"),t("code",[s._v("'\\0'")]),s._v("， C 字符串所用的函数只会识别出其中的 "),t("code",[s._v('"Redis"')]),s._v(" ， 而忽略之后的 "),t("code",[s._v('"Cluster"')]),s._v(" 。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://blog-1253198264.cos.ap-guangzhou.myqcloud.com/image-20210222125022614.png",alt:""}})]),s._v(" "),t("p",[s._v("但是在SDS中这是没有任何问题的,  因为它使用len而不是空字符判断结束。")]),s._v(" "),t("p",[s._v("所有的SDS API会以二进制的方式处理SDS buf数组里面的数据，程序不会对其中数据做任何限制、过滤、修改。")]),s._v(" "),t("p",[s._v("数据写入是什么样子，读取出来就是什么样子。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://blog-1253198264.cos.ap-guangzhou.myqcloud.com/image-20210222125222306.png",alt:""}})]),s._v(" "),t("h4",{attrs:{id:"_3-5、-兼容部分c字符串函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-5、-兼容部分c字符串函数"}},[s._v("#")]),s._v(" 3.5、 兼容部分C字符串函数")]),s._v(" "),t("p",[s._v("Redis保留了"),t("code",[s._v("\\0")]),s._v(" 结尾，虽然分配多了一个字节的空间，但这样的好处是为了重用一部分C语言"),t("code",[s._v("<string.h>")]),s._v("库定义的函数。")]),s._v(" "),t("p",[s._v("比如说可以重用C语言的 "),t("code",[s._v("strcasecmp")]),s._v(" 对比函数，从而避免了不必要的代码重复。")]),s._v(" "),t("h2",{attrs:{id:"_4、总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、总结"}},[s._v("#")]),s._v(" 4、总结")]),s._v(" "),t("p",[s._v("简单的说Redis为什么要使用SDS，其实就是修改了C的原生实现，让其更灵活、高效。")]),s._v(" "),t("p",[s._v("一图总结SDS的好处：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://blog-1253198264.cos.ap-guangzhou.myqcloud.com/image-20210222144222171.png",alt:""}})])])}),[],!1,null,null,null);t.default=r.exports}}]);