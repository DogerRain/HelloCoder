(window.webpackJsonp=window.webpackJsonp||[]).push([[229],{627:function(a,t,v){"use strict";v.r(t);var s=v(7),_=Object(s.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("p",[a._v("很多人会误以为Java内存区域和内存模型是同一个东西，其实并不是。")]),a._v(" "),t("p",[t("strong",[a._v("Java内存区域")]),a._v("是指 JVM运行时将数据分区域存储 ，简单的说就是不同的数据放在不同的地方。通常又叫 "),t("strong",[a._v("运行时数据区域")]),a._v("。")]),a._v(" "),t("p",[t("strong",[a._v("Java内存模型")]),a._v("（JMM）定义了程序中各个变量的访问规则，即在虚拟机中将变量存储到内存和从内存中取出变量这样的底层细节。")]),a._v(" "),t("h2",{attrs:{id:"_1、java内存区域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、java内存区域"}},[a._v("#")]),a._v(" 1、Java内存区域")]),a._v(" "),t("h5",{attrs:{id:"_1-8-之前"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-8-之前"}},[a._v("#")]),a._v(" 1.8 之前：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/DogerRain/image@main/img/image-20201109230052253.png",alt:"Java内存区域 1.8之前"}})]),a._v(" "),t("h5",{attrs:{id:"jdk1-8-含-之后"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk1-8-含-之后"}},[a._v("#")]),a._v(" JDK1.8（含）之后：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/DogerRain/image@main/img/image-20201109230258985.png",alt:"Java内存区域 1.8"}})]),a._v(" "),t("p",[a._v("区别就是 1.8有一个"),t("strong",[a._v("元数据区")]),a._v("替代"),t("strong",[a._v("方法区")]),a._v("了。")]),a._v(" "),t("p",[a._v("JDK 1.7 其实是并没完全移除方法区，但是不会像1.6以前报 “"),t("code",[a._v("java.lang.OutOfMemoryError: PermGen space")]),a._v("”，而是报 "),t("code",[a._v("java.lang.OutOfMemoryError: Java heap space")])]),a._v(" "),t("blockquote",[t("p",[a._v("1.7部分内容（比如 常量池、静态变量有方法区转移到了堆）")])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/DogerRain/image@main/img/image-20201112231733936.png",alt:"演变"}})]),a._v(" "),t("p",[a._v("那么，Java 8 中 PermGen 为什么被移出 HotSpot JVM 了？我总结了两个主要原因（详见："),t("a",{attrs:{href:"http://openjdk.java.net/jeps/122",target:"_blank",rel:"noopener noreferrer"}},[a._v("JEP 122: Remove the Permanent Generation"),t("OutboundLink")],1),a._v("）：")]),a._v(" "),t("ol",[t("li",[a._v("由于 PermGen 内存经常会溢出，引发恼人的 "),t("em",[a._v("java.lang.OutOfMemoryError: PermGen")]),a._v("，因此 JVM 的开发者希望这一块内存可以更灵活地被管理，不要再经常出现这样的 OOM")]),a._v(" "),t("li",[a._v("移除 PermGen 可以促进 HotSpot JVM 与 JRockit VM 的融合，因为 JRockit 没有永久代。")])]),a._v(" "),t("p",[a._v("根据上面的各种原因，PermGen 最终被移除，"),t("strong",[a._v("方法区移至 Metaspace，字符串常量移至 Java Heap")]),a._v("。")]),a._v(" "),t("blockquote",[t("p",[a._v("引用自https://www.sczyh30.com/posts/Java/jvm-metaspace/")])]),a._v(" "),t("p",[a._v("下面逐一介绍一下jvm管辖的这几种内存区域。")]),a._v(" "),t("h2",{attrs:{id:"_2、程序计数器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、程序计数器"}},[a._v("#")]),a._v(" 2、程序计数器")]),a._v(" "),t("p",[a._v("程序计数器（Program Counter Register）是一块较小的内存空间，由于JVM可以并发执行线程，因此会存在线程之间的切换，而这个时候就程序计数器会记录下当前程序执行到的位置，以便在其他线程执行完毕后，恢复现场继续执行。")]),a._v(" "),t("p",[a._v("JVM会为每个线程分配一个程序计数器，与线程的生命周期相同。")]),a._v(" "),t("p",[a._v("如果线程正在执行的是应该Java方法，这个计数器记录的是正在执行虚拟机字节码指令的地址。")]),a._v(" "),t("p",[a._v("如果正在执行的是Native方法，计数器的值则为空（undefined）")]),a._v(" "),t("p",[t("strong",[a._v("程序计数器是唯一一个在 Java 虚拟机规范中没有规定任何 OutOfMemoryError 情况的区域。")])]),a._v(" "),t("h2",{attrs:{id:"_3、java虚拟机栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、java虚拟机栈"}},[a._v("#")]),a._v(" 3、Java虚拟机栈")]),a._v(" "),t("p",[a._v("虚拟机栈 描述的是 Java 方法执行的内存模型：")]),a._v(" "),t("p",[a._v("每个方法在执行的同时都会创建一个栈帧（Stack Frame，是方法运行时的基础数据结构）用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。")]),a._v(" "),t("p",[a._v("虚拟机栈是每个线程独有的，随着线程的创建而存在，线程结束而死亡。")]),a._v(" "),t("p",[a._v("在虚拟机栈内存不够的时候会"),t("code",[a._v("OutOfMemoryError")]),a._v("，在线程运行中需要更大的虚拟机栈时会出现"),t("code",[a._v("StackOverFlowError")]),a._v("。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/DogerRain/image@main/img/image-20201112180235118.png",alt:" "}})]),a._v(" "),t("p",[a._v("虚拟机栈包含很多"),t("strong",[a._v("栈帧")]),a._v("，每个方法执行的同时会创建一个栈帧，栈帧又存储了方法的局部变量表、操作数栈、动态连接和方法返回地址等信息。")]),a._v(" "),t("blockquote",[t("p",[a._v("在活动线程中，只有位于栈顶的栈帧才是有效的，称为"),t("strong",[a._v("当前栈帧")]),a._v("，与这个栈帧相关联的方法称为当前方法。")])]),a._v(" "),t("h5",{attrs:{id:"_1-局部变量表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-局部变量表"}},[a._v("#")]),a._v(" 1）局部变量表")]),a._v(" "),t("p",[a._v("局部变量表是存放"),t("strong",[a._v("方法参数")]),a._v("和"),t("strong",[a._v("局部变量")]),a._v("的区域。")]),a._v(" "),t("p",[a._v("全局变量是放在堆的，有两次赋值的阶段，一次在类加载的准备阶段，赋予系统初始值；另外一次在类加载的初始化阶段，赋予代码定义的初始值。")]),a._v(" "),t("p",[a._v("而局部变量没有赋初始值是不能使用的。")]),a._v(" "),t("h5",{attrs:{id:"_2-操作数栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-操作数栈"}},[a._v("#")]),a._v(" 2）操作数栈")]),a._v(" "),t("p",[a._v("一个先入后出的栈。")]),a._v(" "),t("p",[a._v("当一个方法刚刚开始执行的时候，这个方法的操作数栈是空的，在方法的执行过程中，会有各种字节码指令往操作数栈中写入和提取内容，也就是出栈/入栈操作。")]),a._v(" "),t("h5",{attrs:{id:"_3-动态连接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-动态连接"}},[a._v("#")]),a._v(" 3） 动态连接")]),a._v(" "),t("p",[a._v("每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用。持有这个引用是为了支持方法调用过程中的动态连接(Dynamic Linking)。")]),a._v(" "),t("blockquote",[t("p",[a._v("常量池可以便于指令的识别")])]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[a._v("    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("methodA")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        \n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("methodB")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("methodA")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//methodB()调用methodA(),先找到调用methodA()的版本符号，再变为直接引用")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("p",[a._v("方法调用并不等同于方法执行，方法调用阶段唯一的任务就是确定被调用方法的版本(即调用哪一个方法)，这也是Java强大的扩展能力，在运行期间才能确定目标方法的"),t("strong",[a._v("直接引用")]),a._v("。")]),a._v(" "),t("p",[a._v("所有方法调用中的目标方法在Class文件里面都是一个常量池中的符号引用，在类加载的解析阶段，会将其中的一部分符号引用转化为直接引用。")]),a._v(" "),t("h5",{attrs:{id:"_4-方法返回地址-方法出口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-方法返回地址-方法出口"}},[a._v("#")]),a._v(" 4）方法返回地址（方法出口）")]),a._v(" "),t("p",[a._v("返回分为 正常返回 和 异常退出。")]),a._v(" "),t("p",[a._v("无论何种退出情况，都将返回至方法当前被调用的位置，这也程序才能继续执行。")]),a._v(" "),t("p",[a._v("一般来说，方法正常退出时，调用者的PC计数器的值可以作为返回地址，栈帧中会保存这个计数器值。")]),a._v(" "),t("p",[a._v("方法退出的过程相当于弹出当前栈帧。")]),a._v(" "),t("h2",{attrs:{id:"_4、本地方法栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、本地方法栈"}},[a._v("#")]),a._v(" 4、本地方法栈")]),a._v(" "),t("p",[a._v("Java虚拟机栈是调用Java方法；本地方法栈是调用本地native方法，可以认为是通过 "),t("code",[a._v("JNI")]),a._v(" (Java Native Interface) 直接调用本地 C/C++ 库，不受JVM控制。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/DogerRain/image@main/img/image-20201102143405046.png",alt:" Native方法 "}})]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/DogerRain/image@main/img/image-20201112232713327.png",alt:"Java虚拟机栈与本地方法栈的调用过程"}})]),a._v(" "),t("p",[a._v("本地方法栈也会抛出 "),t("strong",[a._v("StackOverflowError")]),a._v(" 和 "),t("strong",[a._v("OutOfMemoryError")]),a._v(" 异常")]),a._v(" "),t("h2",{attrs:{id:"_5、java堆"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、java堆"}},[a._v("#")]),a._v(" 5、Java堆")]),a._v(" "),t("p",[a._v("Java 堆是被所有"),t("strong",[a._v("线程共享")]),a._v("的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。")]),a._v(" "),t("p",[a._v("堆是垃圾收集器管理的主要区域，又称为“GC堆”，可以说是Java虚拟机管理的内存中最大的一块。")]),a._v(" "),t("p",[a._v("现在的虚拟机（包括"),t("strong",[a._v("HotSpot VM")]),a._v("）都是采用分代回收算法。在分代回收的思想中， 把堆分为：新生代+老年代+永久代（1.8没有了）； 新生代 又分为 Eden + From Survivor + To Survivor区。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://blog-1253198264.cos.ap-guangzhou.myqcloud.com/image-20201030143215163.png",alt:" "}})]),a._v(" "),t("h2",{attrs:{id:"_6、方法区"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6、方法区"}},[a._v("#")]),a._v(" 6、方法区")]),a._v(" "),t("p",[a._v("方法区（Method Area）与 Java 堆一样，是所有"),t("strong",[a._v("线程共享")]),a._v("的内存区域。")]),a._v(" "),t("p",[a._v("方法区用于存储已经被虚拟机加载的类信息（即加载类时需要加载的信息，包括版本、field、方法、接口等信息）、final常量、静态变量、编译器即时编译的代码等。")]),a._v(" "),t("p",[a._v("方法区逻辑上属于堆的一部分，但是为了与堆进行区分，通常又叫“非堆”。")]),a._v(" "),t("p",[a._v("方法区比较重要的一部分是"),t("strong",[a._v("运行时常量池")]),a._v("（Runtime Constant Pool），为什么叫运行时常量池呢？是因为运行期间可能会把新的常量放入池中，比如说常见的String的intern()方法。")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"I am HaC"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),a._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("在编译阶段就把所有的字符串文字放到一个常量池中，复用同一个（比如说上述的“I am HaC”），节省空间。")]),a._v(" "),t("p",[t("strong",[a._v("关于方法区和元空间的关系：")])]),a._v(" "),t("blockquote",[t("p",[a._v("方法区是JVM规范概念，而永久代则是Hotspot虚拟机特有的概念，简单点理解：方法区和堆内存的永久代其实一个东西，但是方法区是包含了永久代。")]),a._v(" "),t("p",[a._v("只有 HotSpot 才有 “PermGen space”，而对于其他类型的虚拟机，如 JRockit（Oracle）、J9（IBM） 并没有“PermGen space”")])]),a._v(" "),t("h2",{attrs:{id:"_7、元空间"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7、元空间"}},[a._v("#")]),a._v(" 7、元空间")]),a._v(" "),t("p",[a._v("1.8就把方法区改用元空间了。类的元信息被存储在元空间中。元空间没有使用堆内存，而是与堆不相连的"),t("strong",[a._v("本地内存区域")]),a._v("。所以，理论上系统可以使用的内存有多大，元空间就有多大，所以不会出现永久代存在时的内存溢出问题。")]),a._v(" "),t("p",[a._v("可以通过 "),t("code",[a._v("-XX:MetaspaceSize")]),a._v(" 和 "),t("code",[a._v("-XX:MaxMetaspaceSize")]),a._v(" 来指定元空间的大小。")]),a._v(" "),t("h2",{attrs:{id:"_8、总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8、总结"}},[a._v("#")]),a._v(" 8、总结：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://blog-1253198264.cos.ap-guangzhou.myqcloud.com/Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F.png",alt:"Java内存区域"}})]),a._v(" "),t("p",[a._v("参考：")]),a._v(" "),t("ul",[t("li",[a._v("https://www.cnblogs.com/czwbig/p/11127124.html")]),a._v(" "),t("li",[a._v("https://blog.csdn.net/xyh930929/article/details/84067186")]),a._v(" "),t("li",[a._v("https://www.cnblogs.com/paddix/p/5309550.html")]),a._v(" "),t("li",[a._v("《深入理解Java虚拟机》")]),a._v(" "),t("li",[a._v("《码出高效》")])])])}),[],!1,null,null,null);t.default=_.exports}}]);