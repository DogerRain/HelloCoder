(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{410:function(t,s,a){"use strict";a.r(s);var n=a(7),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"_1、java的三大特性是什么-谈谈你的理解-设计原则、设计模式有哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、java的三大特性是什么-谈谈你的理解-设计原则、设计模式有哪些"}},[t._v("#")]),t._v(" 1、Java的三大特性是什么，谈谈你的理解，设计原则、设计模式有哪些？")]),t._v(" "),s("p",[s("strong",[t._v("Java三大特性：")])]),t._v(" "),s("p",[t._v("封装、继承、多态。")]),t._v(" "),s("p",[s("strong",[t._v("面向对象的四大特征：")])]),t._v(" "),s("p",[t._v("封装、继承、多态、抽象。")]),t._v(" "),s("p",[s("strong",[t._v("面向对象7大设计原则：")])]),t._v(" "),s("ol",[s("li",[t._v("单一职责原则——SRP")])]),t._v(" "),s("blockquote",[s("p",[t._v("让每个类只专心处理自己的方法。功能不需要太多，但要专注（高内聚，低耦合）")])]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("开闭原则——OCP")])]),t._v(" "),s("blockquote",[s("p",[t._v("软件中的对象(类，模块，函数等)应该对于扩展是开放的，但是对于修改是关闭的。")]),t._v(" "),s("p",[t._v("比如说A模块被其他模块调用，如果A模块不允许修改，那么应该考虑把A模块关闭")])]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[t._v("里式替换原则——LSP")])]),t._v(" "),s("blockquote",[s("p",[t._v("子类可以去扩展父类，但是不能改变父类原有的功能。")])]),t._v(" "),s("p",[t._v("比如说可以继承、可以实现接口，但是不能修改原来具体的方法。")]),t._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[t._v("依赖倒置原则——DIP")])]),t._v(" "),s("blockquote",[s("p",[t._v("应该通过调用接口或抽象类(比较高层)，而不是调用实现类(细节)。")])]),t._v(" "),s("ol",{attrs:{start:"5"}},[s("li",[t._v("接口隔离原则——ISP")])]),t._v(" "),s("blockquote",[s("p",[t._v("把接口分成满足依赖关系的最小接口，实现类中不能有不需要的方法。")])]),t._v(" "),s("ol",{attrs:{start:"6"}},[s("li",[t._v("迪米特原则——LOD")])]),t._v(" "),s("blockquote",[s("p",[t._v("高内聚,低耦合，降低各个对象之间的耦合（不要），提高系统的可维护性。")])]),t._v(" "),s("ol",{attrs:{start:"7"}},[s("li",[t._v("合成复用原则")])]),t._v(" "),s("blockquote",[s("p",[t._v("尽量使用对象组合，而不是继承来达到复用的目的")])]),t._v(" "),s("p",[s("strong",[t._v("面向对象的23种设计模式：")])]),t._v(" "),s("p",[t._v("常见的有 抽象工厂模式、工厂方法模式、建造者模式、单例模式。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/DogerRain/image@main/img-20210401/401339-20170928225241215-295252070.png",alt:" "}})]),t._v(" "),s("h3",{attrs:{id:"_2、8种基本数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、8种基本数据类型"}},[t._v("#")]),t._v(" 2、8种基本数据类型")]),t._v(" "),s("blockquote",[s("p",[t._v("String不是基本类型。")])]),t._v(" "),s("p",[t._v("双等号（==），比较的是他们的值。基本数据类型没有equals方法。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://images-1253198264.cos.ap-guangzhou.myqcloud.com/clipboard-1601965896460.png",alt:" "}})]),t._v(" "),s("p",[t._v("拆箱和装箱：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//自动装箱")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" total "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("99")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//自定拆箱")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" totalprim "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" total"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("400")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("400")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\n")])])]),s("ul",[s("li",[t._v("使用Integer去创建一个数，虚拟机自动为代码做了这个操作 Integer.valueOf()，源码如下：")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IntegerCache")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("low "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IntegerCache")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("high"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IntegerCache")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cache"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IntegerCache")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("low"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("如果值的范围在-128到127之间，它就从高速缓存返回实例。否则 new 一个Integer对象。new Integer 就是一个装箱的过程了，装箱的过程会创建对应的对象，这个会消耗内存，所以装箱的过程会增加内存的消耗，影响性能。")]),t._v(" "),s("p",[s("strong",[t._v("Integer和int 的区别：")])]),t._v(" "),s("p",[t._v("int是java的原始数据类型，Integer是java为int提供的封类。")]),t._v(" "),s("p",[t._v("Integer的默认值是null；int的默认值是0。")]),t._v(" "),s("p",[t._v("总结：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("两个通过new生成的Integer变量永远是不相等的")]),t._v("。因为new生成的是两个对象，其内存地址不同。")]),t._v(" "),s("li",[s("strong",[t._v("Integer与new Integer不会相等")]),t._v("。因为非new生成的Integer变量指向的是java常量池中的对象，而new Integer()生成的变量指向堆中新建的对象，两者在内存中的地址不同。")]),t._v(" "),s("li",[t._v("两个都是非new出来的Integer，（即Integer total = 99 这种 ）如果数在-128到127之间，则是true,否则为false。")]),t._v(" "),s("li",[s("strong",[t._v("Integer变量和int变量比较时，只要两个变量的值是相等的，则结果为true。")]),t._v("（因为包装类Integer和基本数据类型int比较时，java会自动拆箱为int，然后进行比较，实际上就变为两个int变量的比较）")])]),t._v(" "),s("h3",{attrs:{id:"_3、访问修饰符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、访问修饰符"}},[t._v("#")]),t._v(" 3、访问修饰符")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://images-1253198264.cos.ap-guangzhou.myqcloud.com/7010483_1495588925759_ACED241801E307EE7A39612F85A94EBF.png",alt:" "}})]),t._v(" "),s("p",[t._v("public：所有地方的类都可以访问。\nprivate：只能在当前类中进行访问。\nprotected：可以在当前类、当前包、子类中进行访问\n不写默认为default：可以在当前类，当前包中进行访问。")]),t._v(" "),s("h3",{attrs:{id:"_4、-、equals、hashcode区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、-、equals、hashcode区别"}},[t._v("#")]),t._v(" 4、==、equals、hashcode区别")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("==比较的是两个引用在内存中指向的是不是同一对象（即同一内存空间，可以说 == 等于 hashcode）")])]),t._v(" "),s("li",[s("p",[t._v("equals用来比较 两个对象的内容（值）是否相等。")])])]),t._v(" "),s("blockquote",[s("p",[t._v("注意：八个基本数据类型==比较都是 "),s("strong",[t._v("值")]),t._v("。")])]),t._v(" "),s("p",[s("strong",[t._v("有没有可能两个不相等的对象有相同的hashcode？")])]),t._v(" "),s("p",[t._v("有可能。称为hash冲突。")]),t._v(" "),s("p",[t._v("总结：")]),t._v(" "),s("p",[t._v("(1) 同一对象上多次调用hashCode()方法，总是返回相同的整型值。")]),t._v(" "),s("p",[t._v("(2) 如果 a.equals(b)，则一定有 a.hashCode() 一定等于 b.hashCode()")]),t._v(" "),s("p",[t._v("(3)如果 !a.equals(b)，则 a.hashCode() "),s("strong",[t._v("不一定等于")]),t._v(" b.hashCode()。")]),t._v(" "),s("p",[t._v("(4)a.hashCode()==b.hashCode() 则 a.equals(b) 可真可假。")]),t._v(" "),s("p",[t._v("(5)a.hashCode()！= b.hashCode() 则 a.equals(b)一定为假。")]),t._v(" "),s("h3",{attrs:{id:"_5、重载-overload-和重写-override-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5、重载-overload-和重写-override-的区别"}},[t._v("#")]),t._v(" 5、重载（Overload）和重写（Override）的区别")]),t._v(" "),s("p",[t._v("方法的重载和重写都是实现多态的方式，区别在于：")]),t._v(" "),s("p",[t._v("重载实现的是编译时的多态性。\n重写实现的是运行时的多态性。")]),t._v(" "),s("ul",[s("li",[t._v("重载发生在一个类中，同名的方法如果有不同的参数列表（参数类型不同、参数个数不同或者二者都不同）则视为重载；"),s("strong",[t._v("重载对返回类型没有特殊的要求，但不能根据返回类型进行区分。")])]),t._v(" "),s("li",[t._v("重写发生在子类与父类之间，重写要求子类被重写方法与父类被重写方法有相同的参数列表，有兼容的返回类型，比父类被重写方法更好访问，不能比父类被重写方法声明更多的异常（里氏代换原则）。")])]),t._v(" "),s("h3",{attrs:{id:"_6、抽象类和接口的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6、抽象类和接口的区别"}},[t._v("#")]),t._v(" 6、抽象类和接口的区别")]),t._v(" "),s("p",[t._v("抽象类特点：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("抽象类是抽象的，不是具体的，所以抽象类"),s("strong",[t._v("不能被实例化")]),t._v("。"),s("strong",[t._v("但是它仍然具有类的功能，成员变量、成员方法和构造方法的访问方式和普通类一样，也可以实现接口、继承类。")])])]),t._v(" "),s("li",[s("p",[t._v("由于抽象类不能实例化对象，所以"),s("strong",[t._v("抽象类必须被继承，才能被使用")]),t._v("。所以，"),s("strong",[t._v("类的声明、方法体")]),t._v("  就不能使用"),s("code",[t._v("final")]),t._v("去修饰，final表示不可继承和修改，但是变量可以使用final修饰。")])]),t._v(" "),s("li",[s("p",[t._v("抽象类可以有非抽象方法。")])]),t._v(" "),s("li",[s("p",[t._v("抽象类中的抽象方法的访问类型可以是public，protected和默认类型。")])])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("abstract")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Employee")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("People")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我是抽象类的static代码块"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我是抽象类的static方法"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("abstract")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("abstrartMethod")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("abstrartMethod2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"抽象类也可以拥有非抽象方法"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("接口的特点：")]),t._v(" "),s("ol",[s("li",[t._v("接口中方法默认是"),s("code",[t._v("public abstract")]),t._v(" （只能是这两个关键字，或其中一个或都省略）。因为要被继承，所以是public的。")]),t._v(" "),s("li",[t._v("接口中的变量默认是"),s("code",[t._v("public static final")]),t._v("（只能是这三个关键字，或其中两个/一个或都省略）。接口中有成员变量意义不大，实现类可以通过 "),s("code",[t._v("接口名称.变量名称")]),t._v(" 来调用。")]),t._v(" "),s("li",[t._v("java中一个类只能继承一个类，但一个接口可以继承多个接口。")]),t._v(" "),s("li",[t._v("接口不能实现接口")]),t._v(" "),s("li",[t._v("接口中不能有构造方法。（因为它不是一个类）")]),t._v(" "),s("li",[t._v("1.8中及以后，接口中可以有default默认方法（普通方法），可以有静态方法和方法体了。")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("People")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我是接口的静态方法"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//普通方法")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("testA2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("strong",[t._v("两者总结：")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("参数")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("抽象类")]),t._v(" "),s("th",[t._v("接口")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("声明")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("抽象类使用abstract关键字声明")]),t._v(" "),s("td",[t._v("接口使用interface关键字声明")])]),t._v(" "),s("tr",[s("td",[t._v("实现")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("子类使用extends关键字来继承抽象类。如果子类不是抽象类的话，需要实现父类的所有方法")]),t._v(" "),s("td",[t._v("子类使用implements关键字来实现接口。 需要实现所有接口的方法。")])]),t._v(" "),s("tr",[s("td",[t._v("构造器")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("抽象类可以有构造器（但是没啥用）")]),t._v(" "),s("td",[t._v("接口不能有构造器")])]),t._v(" "),s("tr",[s("td",[t._v("多继承")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("一个类最多只能继承一个抽象类")]),t._v(" "),s("td",[t._v("一个类可以实现多个接口，一个接口可以继承多个接口，但是接口不能实现接口")])]),t._v(" "),s("tr",[s("td",[t._v("普通字段声明")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("抽象类的字段声明可以是任意的，但是不能是"),s("code",[t._v("static")]),t._v("，因为抽象类是要被实现的，静态类是不能被修改的；可以使用"),s("code",[t._v("final")]),t._v("修饰")]),t._v(" "),s("td",[t._v("默认是"),s("code",[t._v("public static final")]),t._v("（默认；只能是这三个关键字，或其中两个/一个或都省略）")])]),t._v(" "),s("tr",[s("td",[t._v("普通方法声明")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("同上")]),t._v(" "),s("td",[t._v("1.8中及以后，也可以普通方法了（仅 default），"),s("br"),t._v("也可以有静态方法（仅 public static）")])]),t._v(" "),s("tr",[s("td",[t._v("实例化")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("不是具体类，不能实例化")]),t._v(" "),s("td",[t._v("不是类，不能实例化")])]),t._v(" "),s("tr",[s("td",[t._v("方法体")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("抽象方法访问类型"),s("strong",[t._v("不能是private")]),t._v("，不能是 static、final修饰（需要实现的~），而且默认是 abstract 修饰")]),t._v(" "),s("td",[t._v("接口中方法默认是"),s("code",[t._v("public abstract")]),t._v("（只能是这两个关键字，或其中一个或都省略）。因为要被继承，所以是public的。")])])])]),t._v(" "),s("blockquote",[s("p",[t._v("接口可以看作一个更特殊的抽象类，修饰符和限制都更多了，但是自从1.8中及以后，接口的"),s("strong",[t._v("普通方法")]),t._v("要比抽象类要灵活了，跟普通类一样使用；而抽象类不能使用static其他基本无异")])]),t._v(" "),s("h3",{attrs:{id:"_7、-和-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7、-和-的区别"}},[t._v("#")]),t._v(" 7、&和&&的区别")]),t._v(" "),s("p",[t._v("&是位运算符，表示按位 与运算。（两个操作数中位都为1，结果才为1，否则结果为0）")]),t._v(" "),s("p",[t._v("&&是逻辑运算符，表示逻辑与（and）。")]),t._v(" "),s("h3",{attrs:{id:"_8、switch中能否使用string做参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8、switch中能否使用string做参数"}},[t._v("#")]),t._v(" 8、switch中能否使用string做参数?")]),t._v(" "),s("p",[t._v("在JDK 1.7之前,switch只能支持byte,short,char,int或者其对应的包装类以及Enum类型.从JDK 1.7之后switch开始支持String类型.但到目前为止,switch都不支持long类型。")]),t._v(" "),s("p",[s("strong",[t._v("还有break的坑：")])]),t._v(" "),s("p",[t._v("只要没有break ，就一直往下渗透，包括default。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SwitchCaseTest")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n                num"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n                num"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n                num"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n                num"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//5")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"_9、string、stringbuffer、stringbuilder区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9、string、stringbuffer、stringbuilder区别"}},[t._v("#")]),t._v(" 9、String、StringBuffer、StringBuilder区别")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("可变性\n简单的来说：String 类中使用 final 关键字字符数组保存字符串， "),s("code",[t._v("private final char value[]")]),t._v(" ，所以 String\n对象是不可变的。而StringBuilder 与 StringBuffer 都继承自 AbstractStringBuilder 类，在 AbstractStringBuilder\n中也是使用字符数组保存字符串"),s("code",[t._v("char[] value")]),t._v(" 但是没有用 final 关键字修饰，所以这两种对象都是可变的。")])]),t._v(" "),s("li",[s("p",[t._v("安全性")]),t._v(" "),s("p",[t._v("String 是一个字符串常量，final修饰，当创建之后即不能更改，不可被继承，线程安全")]),t._v(" "),s("p",[t._v("StringBuffer 用了"),s("code",[t._v("synchronized")]),t._v("修饰，线程安全；反之 StringBuilder 线程不安全")])])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("   "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuffer")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        toStringCache "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[s("p",[t._v("效率")]),t._v(" "),s("p",[t._v("StringBuffer很多方法都加了 synchronized ， 也就是同时刻只能有一个线程去执行一个方法 （加锁，需要等待），效率就低。")])])]),t._v(" "),s("p",[t._v("对于三者使用的总结：")]),t._v(" "),s("ol",[s("li",[t._v("操作少量的数据 ---\x3e>> String")]),t._v(" "),s("li",[s("strong",[t._v("单线程")]),t._v("操作字符串缓冲区下操作大量数据 ---\x3e>> StringBuilder")]),t._v(" "),s("li",[s("strong",[t._v("多线程")]),t._v("操作字符串缓冲区下操作大量数据 ---\x3e>> StringBuffer")])]),t._v(" "),s("p",[t._v("留个题目：")]),t._v(" "),s("div",{staticClass:"language-Java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuffer")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuffer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuffer")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuffer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"B"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("operator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('","')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("operator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuffer")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuffer")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n        x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n        y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("输出是  "),s("strong",[t._v("AB,B")])]),t._v(" "),s("h3",{attrs:{id:"_10、math-round-11-5-等于多少-math-round-11-5-等于多少"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10、math-round-11-5-等于多少-math-round-11-5-等于多少"}},[t._v("#")]),t._v(" 10、Math.round(11.5) 等于多少？Math.round(-11.5)等于多少？")]),t._v(" "),s("p",[t._v("Math.round(11.5)的返回值是12，Math.round(-11.5)的返回值是-11。")]),t._v(" "),s("p",[t._v("四舍五入的原理是在参数上加0.5然后进行下取整。")]),t._v(" "),s("h3",{attrs:{id:"_11、string-s-xyz-和string-s-new-string-xyz-区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11、string-s-xyz-和string-s-new-string-xyz-区别"}},[t._v("#")]),t._v(' 11、String s = "xyz"和String s = new String("xyz");区别')]),t._v(" "),s("p",[s("code",[t._v('String s = new String("hello");')]),s("strong",[t._v("可能创建两个对象也可能创建一个对象")]),t._v("。如果常量池中有"),s("code",[t._v("hello")]),t._v("字符串常量的话，则仅仅在堆中创建一个对象。如果常量池中没有"),s("code",[t._v("hello")]),t._v("对象，则堆上和常量池都需要创建。")]),t._v(" "),s("p",[s("code",[t._v('String s = "hello"')]),t._v("这样创建的对象，JVM会直接检查字符串常量池是否已有"),s("code",[t._v('"hello"')]),t._v('字符串对象，如没有，就分配一个内存存放"'),s("code",[t._v('hello"')]),t._v("，如有了，则直接将字符串常量池中的地址返回给栈。(没有new，没有堆的操作)")]),t._v(" "),s("p",[s("strong",[t._v("一个String的经典题目：")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" test"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"javaandpython"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"java"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"and"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str3"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"python"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("test"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"java"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"and"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"python"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("test "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("str1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" str2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" str3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\n")])])]),s("p",[t._v('这是因为字符串字面量拼接操作是在Java编译器编译期间就执行了，也就是说编译器编译时，直接把"java"、"and"和"python"这三个字面量进行"+"操作得到一个"javaandpython" 常量，并且直接将这个常量放入字符串池中，这样做实际上是一种优化，将3个字面量合成一个，避免了创建多余的字符串对象（只有一个对象"javaandpython"，在字符串常量池中）。')]),t._v(" "),s("p",[t._v('而字符串引用的"+"运算是在Java运行期间执行的，即str1 + str2 + str3在程序执行期间才会进行计算，它会在堆内存中重新创建一个拼接后的字符串对象。且在字符串常量池中也会有str1,str2与str3，这里创建多少个新的对象与原来字符串常量池中有没有str1、str2、str3有关，如果之前存在就不会创建新的对象。')]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tarena"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tarena"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("str2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\n")])])]),s("p",[t._v('这是因为str和str2是在堆中的两个不同地址，最后都指向了常量池的 "tarena"')]),t._v(" "),s("h3",{attrs:{id:"_12、-异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12、-异常"}},[t._v("#")]),t._v(" 12、 异常")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/DogerRain/image@main/Home/image-20210115172917862.png",alt:""}})]),t._v(" "),s("p",[t._v("Throwable 分为Exception（异常） 和 Error（错误） ，二者都是 Java 异常处理的重要子类，各自都包含大量子类。")]),t._v(" "),s("p",[s("strong",[t._v("Error（错误）")]),t._v(": 是程序无法处理的错误。")]),t._v(" "),s("p",[s("strong",[t._v("Exception（异常）")]),t._v(": 是程序本身可以处理的异常。常见的有RuntimeException、NullPointerException、ArrayIndexOutOfBoundsException （下标越界异常）。")]),t._v(" "),s("h5",{attrs:{id:"exception异常分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#exception异常分类"}},[t._v("#")]),t._v(" "),s("strong",[t._v("Exception异常分类")])]),t._v(" "),s("p",[t._v("Java 的所有异常可以分为受检异常（checked exception）和非受检异常（unchecked exception）。")]),t._v(" "),s("p",[s("strong",[t._v("受检异常（checked exception）：")])]),t._v(" "),s("p",[t._v("编译时必须需要处理的异常，否则编译不通过，除 RuntimeException 及其子类外，其他的 Exception 异常都属于受检异常。比如 调用 sleep()方法")]),t._v(" "),s("p",[t._v("处理的方法为 使用try-catch捕获或者 用 throws 关键字抛出。")]),t._v(" "),s("p",[s("strong",[t._v("非受检异常（unchecked exception）：")])]),t._v(" "),s("p",[t._v("当程序中出现此类异常时，即使我们没有try-catch捕获它，也没有使用throws抛出该异常，编译也会正常通过。**该类异常包括运行时异常（RuntimeException极其子类）和错误（Error）。**比如 1/0；")]),t._v(" "),s("h5",{attrs:{id:"常见的-runtimeexception-有哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见的-runtimeexception-有哪些"}},[t._v("#")]),t._v(" 常见的 RuntimeException 有哪些？")]),t._v(" "),s("ul",[s("li",[t._v("ClassCastException(类转换异常)")]),t._v(" "),s("li",[t._v("IndexOutOfBoundsException(数组越界)")]),t._v(" "),s("li",[t._v("NullPointerException(空指针)")]),t._v(" "),s("li",[t._v("ArrayStoreException(数据存储异常，操作数组时类型不一致)")]),t._v(" "),s("li",[t._v("还有IO操作的BufferOverflowException异常")])]),t._v(" "),s("h3",{attrs:{id:"_13、throw-和-throws-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13、throw-和-throws-的区别"}},[t._v("#")]),t._v(" 13、Throw 和 throws 的区别：")]),t._v(" "),s("p",[t._v("​\t  "),s("strong",[t._v("位置不同：")])]),t._v(" "),s("ol",[s("li",[t._v("throws 用在函数上，后面跟的是异常类，可以跟多个；而 throw 用在函数内，后面跟的是异常对象。")])]),t._v(" "),s("p",[s("strong",[t._v("功能不同：")])]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[s("p",[t._v("throws 用来声明异常，让调用者只知道该功能可能出现的问题，可以给出预先的处理方式；throw抛出具体的问题对象，执行到throw，功能就已经结束了，跳转到调用者，并将具体的问题对象抛给调用者。也就是说 throw 语句独立存在时，下面不要定义其他语句，因为执行不到。")])]),t._v(" "),s("li",[s("p",[t._v("throws 表示出现异常的一种可能性，并不一定会发生这些异常；throw 则是抛出了异常，执行 throw 则一定抛出了某种异常对象。")])]),t._v(" "),s("li",[s("p",[t._v("两者都是消极处理异常的方式，只是抛出或者可能抛出异常，但是不会由函数去处理异常，真正的处理异常由函数的上层调用处理")])])]),t._v(" "),s("h3",{attrs:{id:"_14、java中4种类型的流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14、java中4种类型的流"}},[t._v("#")]),t._v(" 14、java中4种类型的流")]),t._v(" "),s("p",[t._v("字节输入流：InputStream, （读取原始数据）")]),t._v(" "),s("p",[t._v("字节输出流：OutputStream（读取原始数据）")]),t._v(" "),s("p",[t._v("字符输入流：Reader")]),t._v(" "),s("p",[t._v("字符输出流：Writer")]),t._v(" "),s("p",[t._v("1，字节流：以 8 位（即 1 byte，8 bit）作为一个数据单元，数据流中最小的数据单元是字节。")]),t._v(" "),s("p",[t._v("2，字符流：以 16 位（即 1 char，2 byte，16 bit）作为一个数据单元，数据流中最小的数据单元是字符， Java 中的字符是 Unicode 编码，一个字符占用两个字节。")]),t._v(" "),s("p",[t._v("字节流没有缓冲区，是直接输出的，而字符流是输出到缓冲区的。因此在输出时，字节流不调用colse()方法时，信息已经输出了，而字符流只有在调用close()方法关闭缓冲区时，信息才输出。要想字符流在未关闭时输出信息，则需要手动调用flush()方法。")]),t._v(" "),s("p",[t._v("·    读写单位不同：字节流以字节（8bit）为单位，字符流以字符为单位，根据码表映射字符，一次可能读多个字节。")]),t._v(" "),s("p",[t._v("·    处理对象不同：字节流能处理所有类型的数据（如图片、avi等），而字符流只能处理字符类型的数据。")]),t._v(" "),s("p",[s("strong",[t._v("结论：只要是处理纯文本数据，就优先考虑使用字符流。除此之外都使用字节流。")])]),t._v(" "),s("h3",{attrs:{id:"_15、final-finally-finalize的区别。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15、final-finally-finalize的区别。"}},[t._v("#")]),t._v(" 15、final, finally, finalize的区别。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("final 用于声明属性，方法和类，分别表示属性不可变，方法不可覆盖，类不可继承。")])]),t._v(" "),s("li",[s("p",[t._v("finally是异常处理语句结构的一部分，表示总是执行。")])]),t._v(" "),s("li",[s("p",[t._v("finalize是Object类的一个方法，在垃圾收集器执行的时候会调用被回收对象的此方法，可以覆盖此方法提供垃圾收集时的其他资源回收，例如关闭文件等。")])])]),t._v(" "),s("h3",{attrs:{id:"_16-、构造器constructor是否可被重写"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_16-、构造器constructor是否可被重写"}},[t._v("#")]),t._v(" 16 、构造器Constructor是否可被重写？")]),t._v(" "),s("p",[t._v("构造器Constructor不能被继承，所以不能被重写。")]),t._v(" "),s("p",[t._v("但是可以重载，因为一个类可以不止一个构造函数，如果没有声明构造函数，会默认生成一个无参的构造函数。")]),t._v(" "),s("h3",{attrs:{id:"_17、bio-nio-aio的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_17、bio-nio-aio的区别"}},[t._v("#")]),t._v(" 17、BIO,NIO,AIO的区别")]),t._v(" "),s("ul",[s("li",[t._v("BIO，即平时所说的IO，同步阻塞式 IO，IO 面向流，阻塞。单线程一次只能应付一个连接。数据的读取写入必须阻塞在一个线程内等待其完成。适用于单机低并发的情况。")]),t._v(" "),s("li",[t._v("NIO，同步非阻塞式 IO，面向缓存，非阻塞，拥有选择器。可以单线程管理多个连接。在Java 1.4 中引入，提供了与传统BIO模型中的 Socket 和 ServerSocket 相对应的 SocketChannel 和 ServerSocketChannel 两种不同的套接字通道实现,两种通道都支持阻塞和非阻塞两种模式。适用于对于高负载、高并发的（网络）应用。")]),t._v(" "),s("li",[t._v("AIO，异步非阻塞式IO，Java 7 中引入，基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。")])]),t._v(" "),s("h3",{attrs:{id:"_18、object中常见的方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_18、object中常见的方法"}},[t._v("#")]),t._v(" 18、Object中常见的方法")]),t._v(" "),s("p",[t._v("Object 是所有类的父类，Object中文又叫对象，所以又有Java一切皆对象的说法，而Object又提供了很多常见的API，如下：")]),t._v(" "),s("ul",[s("li",[t._v("getClass()  //返回此 Object 的运行类。")]),t._v(" "),s("li",[t._v("hashCode()  //用于获取对象的哈希值。")]),t._v(" "),s("li",[t._v("equals(Object obj)   //用于确认两个对象是否“相同”。")]),t._v(" "),s("li",[t._v("clone()  //创建并返回此对象的一个副本。")]),t._v(" "),s("li",[t._v("toString()  //返回该对象的字符串表示。")]),t._v(" "),s("li",[t._v("notify()  //唤醒在此对象监视器上等待的单个线程。")]),t._v(" "),s("li",[t._v("notifyAll()   //唤醒在此对象监视器上等待的所有线程。")]),t._v(" "),s("li",[t._v("wait(long timeout)  //在其他线程调用此对象的 notify() 方法或 notifyAll() 方法，或    者超过指定的时间量前，导致当前线程等待。")]),t._v(" "),s("li",[t._v("wait(long timeout, int nanos)  //在其他线程调用此对象的 notify() 方法或 notifyAll() 方法，或者其他某个线程中断当前线程，或者已超过某个实际时间量前，导致当前线程等待。")]),t._v(" "),s("li",[t._v("wait()  //用于让当前线程失去操作权限，当前线程进入等待序列")]),t._v(" "),s("li",[t._v("finalize()  //当垃圾回收器确定不存在对该对象的更多引用时，由对象的垃圾回收器调用此方法。")])]),t._v(" "),s("h3",{attrs:{id:"_19、jdk8新特性有哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_19、jdk8新特性有哪些"}},[t._v("#")]),t._v(" 19、JDK8新特性有哪些")]),t._v(" "),s("p",[t._v("1、lambda表达式\n2、接口的默认方法，default方法\n3、Comparator 接口\n4、Stream 接口\n5、Filter 过滤\n6、Sort 排序\n7、Date API，包含了一组全新的时间日期API")]),t._v(" "),s("h3",{attrs:{id:"_20、float-num-1-2-正确吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_20、float-num-1-2-正确吗"}},[t._v("#")]),t._v(" 20、float num = 1.2 正确吗？")]),t._v(" "),s("p",[t._v("不正确。Java中浮点数默认是double 的。")]),t._v(" "),s("p",[t._v("可以这样声明float类型：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.2f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("或者类型转换：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.2")]),t._v("\n")])])]),s("h3",{attrs:{id:"_21、java注释和注解的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_21、java注释和注解的区别"}},[t._v("#")]),t._v(" 21、Java注释和注解的区别")]),t._v(" "),s("p",[t._v("这是两个不同的概念。")]),t._v(" "),s("p",[s("strong",[t._v("注释：")])]),t._v(" "),s("p",[t._v("对代码的解释，方便别人阅读你的代码")]),t._v(" "),s("p",[t._v("注释分为：")]),t._v(" "),s("ul",[s("li",[t._v("单行注释\n格式： // 注释文字")]),t._v(" "),s("li",[t._v("多行注释\n格式： /* 注释文字 */")]),t._v(" "),s("li",[t._v("文档注释\n格式：/** 注释文字 */")])]),t._v(" "),s("p",[s("strong",[t._v("注解：")])]),t._v(" "),s("p",[t._v("注解 ，参与代码编译，以@开头的，与工具一起使用。对于位置、语法、内容有一定的限制。注释 ，可以随意在任务位置填写内容，对代码任何没有影响。")]),t._v(" "),s("p",[t._v("例如 "),s("code",[t._v("@SuppressWarnings(value=”unchecked”)")])]),t._v(" "),s("h3",{attrs:{id:"_22、this与super的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_22、this与super的区别"}},[t._v("#")]),t._v(" 22、this与super的区别")]),t._v(" "),s("p",[t._v("this是自身的一个对象，代表对象本身，可以理解为：指向对象本身的一个指针。")]),t._v(" "),s("p",[t._v("super可以理解为是指向自己超（父）类对象的一个指针，而这个超类指的是离自己最近的一个父类。")]),t._v(" "),s("p",[t._v("其他：")]),t._v(" "),s("ul",[s("li",[t._v("super()在子类中调用父类的构造方法，this()在本类内调用本类的其它构造方法。")]),t._v(" "),s("li",[t._v("super()和this()均需放在构造方法内第一行。")]),t._v(" "),s("li",[t._v("都是关键字。")]),t._v(" "),s("li",[t._v("均不可以在static环境中使用")])]),t._v(" "),s("h3",{attrs:{id:"_23、break-continue-return-的区别及作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_23、break-continue-return-的区别及作用"}},[t._v("#")]),t._v(" 23、break ,continue ,return 的区别及作用")]),t._v(" "),s("ul",[s("li",[t._v("return的功能是结束一个方法。 一旦在循环体内执行到一个return语句，return语句将会结束该方法，循环自然也随之结束。")]),t._v(" "),s("li",[t._v("continue 跳出本次循环，继续执行下次循环(结束正在执行的循环 进入下一个循环条件)。")]),t._v(" "),s("li",[t._v("break 跳出 上一层循环，结束当前循环体，不再执行当前循环。")])]),t._v(" "),s("h3",{attrs:{id:"_24、java获取反射的三种方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_24、java获取反射的三种方法"}},[t._v("#")]),t._v(" 24、Java获取反射的三种方法")]),t._v(" "),s("ol",[s("li",[t._v("通过new对象实现反射机制（ "),s("code",[t._v("对象.getClass()")]),t._v(" ）")]),t._v(" "),s("li",[t._v("通过路径实现反射机制（ "),s("code",[t._v('Class.forName("包名.类名")')]),t._v(" ）")]),t._v(" "),s("li",[t._v("通过类名实现反射机制 （ "),s("code",[t._v("类名.Class")]),t._v(" ）")])]),t._v(" "),s("p",[t._v("demo：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" sex "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    pub1ic f1oat score"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \npub1ic "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Get")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取反射机制三种方式")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassNotFoundException")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//方式一(通过建立对象)")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),t._v(" stu "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StudentO")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),t._v(" classobj1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" stu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" getClassO"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print1n")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("classobj1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" getNameO"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//方式二(所在通过路径-相对路径)")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),t._v(" classobj2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" forName "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('" fanshe . Student"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("classobj2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" getName0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//方式三(通过类名)")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),t._v(" classobj3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("classobj3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" getName0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"_25、java的四种引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_25、java的四种引用"}},[t._v("#")]),t._v(" 25、Java的四种引用")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("引用类型")]),t._v(" "),s("th",[t._v("被垃圾回收时间")]),t._v(" "),s("th",[t._v("用途")]),t._v(" "),s("th",[t._v("生存时间")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("强引用")]),t._v(" "),s("td",[t._v("从来不会")]),t._v(" "),s("td",[t._v("对象的一般状态")]),t._v(" "),s("td",[t._v("JVM停止运行时终止")])]),t._v(" "),s("tr",[s("td",[t._v("软引用")]),t._v(" "),s("td",[t._v("当内存不足时")]),t._v(" "),s("td",[t._v("对象缓存")]),t._v(" "),s("td",[t._v("内存不足时终止")])]),t._v(" "),s("tr",[s("td",[t._v("弱引用")]),t._v(" "),s("td",[t._v("正常垃圾回收时")]),t._v(" "),s("td",[t._v("对象缓存")]),t._v(" "),s("td",[t._v("垃圾回收后终止")])]),t._v(" "),s("tr",[s("td",[t._v("虚引用")]),t._v(" "),s("td",[t._v("正常垃圾回收时")]),t._v(" "),s("td",[t._v("跟踪对象的垃圾回收")]),t._v(" "),s("td",[t._v("垃圾回收后终止")])])])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  强引用")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SoftReference")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" softRef"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SoftReference")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 软引用")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WeakReference")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" abcWeakRef "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WeakReference")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//弱引用")]),t._v("\n")])])]),s("h3",{attrs:{id:"_26、junit用法-before-beforeclass-after-afterclass的执行顺序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_26、junit用法-before-beforeclass-after-afterclass的执行顺序"}},[t._v("#")]),t._v(" 26、junit用法，before,beforeClass,after, afterClass的执行顺序")]),t._v(" "),s("p",[t._v("BeforeClass 》 before 》test 》 after 》 afterClass")]),t._v(" "),s("p",[t._v("有多个before，多个after ，它们的执行顺序是怎么样的呢？")]),t._v(" "),s("p",[t._v("我猜测是方法名的大小比较（和位置无关），我本地实验结果：")]),t._v(" "),s("p",[t._v("before3》before2》before1")]),t._v(" "),s("p",[t._v("after1》after2》after3")])])}),[],!1,null,null,null);s.default=e.exports}}]);