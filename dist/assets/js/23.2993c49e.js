(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{432:function(t,a,s){"use strict";s.r(a);var n=s(7),r=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h5",{attrs:{id:"_31、关于java的一些概念-下面哪些描述是正确的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_31、关于java的一些概念-下面哪些描述是正确的"}},[t._v("#")]),t._v(" 31、关于Java的一些概念，下面哪些描述是正确的：(  )")]),t._v(" "),a("p",[t._v("A\t所有的Java异常和错误的基类都是java.lang.Exception, 包括java.lang.RuntimeException")]),t._v(" "),a("p",[t._v("B\t通过try … catch … finally语句，finally中的语句部分无论发生什么异常都会得到执行")]),t._v(" "),a("p",[t._v("C\tjava中所有的数据都是对象")]),t._v(" "),a("p",[t._v("D\tJava通过垃圾回收回收不再引用的变量，垃圾回收时对象的finallize方法一定会得到执行")]),t._v(" "),a("p",[t._v("E\tJava是跨平台的语言，无论通过哪个版本的Java编写的程序都能在所有的Java运行平台中运行")]),t._v(" "),a("p",[t._v("F\tJava通过synchronized进行访问的同步，synchronized作用非静态成员方法和静态成员方法上同步的目标是不同的")]),t._v(" "),a("p",[a("strong",[t._v("B F")])]),t._v(" "),a("p",[t._v("A、java异常和错误的基类是Throwable,包括Exception和Error\nB、try...catch...finally finally不管什么异常都会执行\nC、java是面向对象的，但是不是所有的都是对象，基本数据类型就不是对象，所以才会有封装类的；\nD、垃圾回收器并不总是工作，只有当内存资源告急时，垃圾回收器才会工作；即使垃圾回收器工作，finalize方法也不一定得到执行，这是由于程序中的其他线程的优先级远远高于执行finalize（）函数线程的优先级。\nE、JAVA跨平台性    实现在任意平台（不是任意版本）的java程序都可以在其他平台运行\nF、synchronized实现方式有多种，修饰静态方法和非静态方法是不一样的。")]),t._v(" "),a("h5",{attrs:{id:"_32、java1-8之后-java接口的修饰符可以为"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_32、java1-8之后-java接口的修饰符可以为"}},[t._v("#")]),t._v(" 32、Java1.8之后，Java接口的修饰符可以为（）")]),t._v(" "),a("p",[t._v("A\tprivate")]),t._v(" "),a("p",[t._v("B\tprotected")]),t._v(" "),a("p",[t._v("C\tfinal")]),t._v(" "),a("p",[t._v("D\tabstract")]),t._v(" "),a("p",[a("strong",[t._v("D")])]),t._v(" "),a("p",[t._v("接口默认是 public abstract修饰")]),t._v(" "),a("h5",{attrs:{id:"_33、哪些是-setvar方法的重载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_33、哪些是-setvar方法的重载"}},[t._v("#")]),t._v(" 33、哪些是 setVar方法的重载？")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" methodover\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setVar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("A\tprivate void setVar(int a， float c， int b){}")]),t._v(" "),a("p",[t._v("B\tprotected void setVar(int e， int d， float f){}")]),t._v(" "),a("p",[t._v("C\tpublic int setVar(int a， float c， int b){return a;}")]),t._v(" "),a("p",[t._v("D\tpublic int setVar(int a， float c){return a;}")]),t._v(" "),a("p",[a("strong",[t._v("A C D")])]),t._v(" "),a("p",[t._v("重载是在同一个类中，有多个方法名相同，参数列表不同(参数个数不同，参数类型不同),与方法的返回值无关，与权限修饰符无关。")]),t._v(" "),a("h5",{attrs:{id:"_34、下面这三条语句输出结果是"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_34、下面这三条语句输出结果是"}},[t._v("#")]),t._v(" 34、下面这三条语句输出结果是？")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"is "')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" is"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"is "')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("is 1005\n105 is\nis 105\n")])])]),a("p",[t._v('1."is"说明后面的内容都会被强制转换为string，is 100再和 5 拼接。\n2.100+5先得到105，然后与is拼接\n3.先算括号内的')]),t._v(" "),a("p",[t._v("int 和 String 用 “+” 拼接，自动强制转换为string。")]),t._v(" "),a("h5",{attrs:{id:"_35、下面叙述那个是正确的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_35、下面叙述那个是正确的"}},[t._v("#")]),t._v(" 35、下面叙述那个是正确的？（）")]),t._v(" "),a("p",[t._v("A\tjava中的集合类（如Vector）可以用来存储任何类型的对象，且大小可以自动调整。但需要事先知道所存储对象的类型，才能正常使用。")]),t._v(" "),a("p",[t._v("B\t在java中，我们可以用违例（Exception）来抛出一些并非错误的消息，但这样比直接从函数返回一个结果要更大的系统开销。")]),t._v(" "),a("p",[t._v("C\tjava接口包含函数声明和变量声明。")]),t._v(" "),a("p",[t._v("D\tjava中，子类不可以访问父类的私有成员和受保护的成员。")]),t._v(" "),a("p",[a("strong",[t._v("B")])]),t._v(" "),a("p",[t._v("vector默认就Object类型，不需要事先知道对象类型\n接口的变量是final，准确的说叫常量，不是变量。\n子类可以访问父类受保护（protected）的成员，不能访问的是privated。")]),t._v(" "),a("h5",{attrs:{id:"_36、java中-以下输出是"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_36、java中-以下输出是"}},[t._v("#")]),t._v(" 36、Java中，以下输出是？")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("127")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nsum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("strong",[t._v("72")])]),t._v(" "),a("p",[t._v("java中byte只有1个字节，8位，所以它的范围是 -128~127")]),t._v(" "),a("p",[t._v("会发生溢出, 对127加一发生溢出,  0111 1111 --\x3e 1000 0000, 1000 0000为补码-128, 所以结果为200-128=72")]),t._v(" "),a("h5",{attrs:{id:"_37、最后输出什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_37、最后输出什么"}},[t._v("#")]),t._v(" 37、最后输出什么？")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("A\t19\nB\t20\nC\t21\nD\t22")]),t._v(" "),a("p",[a("strong",[t._v("C")])]),t._v(" "),a("p",[t._v("a++ 先把10赋值给a 再+1 所以左边是10 但此时a=11。")]),t._v(" "),a("p",[t._v("右边a -- 也是先赋值 此时右边赋值了，这里"),a("strong",[t._v("a=11")]),t._v("，再 -1。10+11=2")]),t._v(" "),a("p",[t._v("最后a的值是10。")]),t._v(" "),a("p",[t._v("如果：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("输出")]),t._v(" "),a("blockquote",[a("p",[t._v("3\n2")])]),t._v(" "),a("p",[a("code",[t._v("b++ + b")]),t._v(" 左边值是 1 ，b赋值是2；右边 b是2，值也是2 ，所以是3。")]),t._v(" "),a("h5",{attrs:{id:"_38、关于这段代码的描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_38、关于这段代码的描述"}},[t._v("#")]),t._v(" 38、关于这段代码的描述：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),t._v(" b1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b2"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b6"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),t._v(" b4"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b5"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \nb6"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("b4"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("b5"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \nb3"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("b2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b3"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("b6"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("A\t输出结果：13")]),t._v(" "),a("p",[t._v("B\t语句：b6=b4+b5编译出错")]),t._v(" "),a("p",[t._v("C\t语句：b3=b1+b2编译出错")]),t._v(" "),a("p",[t._v("D\t运行期抛出异常")]),t._v(" "),a("p",[a("strong",[t._v("C")])]),t._v(" "),a("p",[t._v("所有的byte,short,char型的值将被提升为int型，b1+b2计算后已经是int类型，赋值给b3，b3是byte类型，类型不匹配，编译不会通过，需要进行强制转换。")]),t._v(" "),a("p",[t._v("声明为final的变量会被JVM优化，第三行相当于b6=10，第6行相当于 b6 = 10")]),t._v(" "),a("h5",{attrs:{id:"_39、关于java中的数组-下面的一些描述-哪些描述是准确的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_39、关于java中的数组-下面的一些描述-哪些描述是准确的"}},[t._v("#")]),t._v(" 39、关于Java中的数组，下面的一些描述，哪些描述是准确的：（    ）")]),t._v(" "),a("p",[t._v("A\t数组是一个对象，不同类型的数组具有不同的类")]),t._v(" "),a("p",[t._v("B\t数组长度是可以动态调整的")]),t._v(" "),a("p",[t._v("C\t数组是一个连续的存储结构")]),t._v(" "),a("p",[t._v("D\t一个固定长度的数组可类似这样定义: int array[100]")]),t._v(" "),a("p",[t._v("E\t两个数组用equals方法比较时，会逐个便利遍历其中的元素，对每个元素进行比较")]),t._v(" "),a("p",[t._v("F\t可以二维数组，且可以有多维数组，都是在Java中合法的")]),t._v(" "),a("p",[a("strong",[t._v("A C F")])]),t._v(" "),a("p",[t._v("数组的长度是固定的，不能动态调整。")]),t._v(" "),a("p",[t._v("一个固定长度的数组 初始化 "),a("code",[t._v("int[] array =new int[100]")]),t._v("\n两个数组equals，比较的是是否同一个对象。")]),t._v(" "),a("h5",{attrs:{id:"_40、表达式-short-10-10-2-2运算后结果是什么类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_40、表达式-short-10-10-2-2运算后结果是什么类型"}},[t._v("#")]),t._v(" 40、表达式(short)10/10.2*2运算后结果是什么类型？")]),t._v(" "),a("p",[t._v("A\tshort\nB\tint\nC\tdouble\nD\tfloat")]),t._v(" "),a("p",[a("strong",[t._v("C")])]),t._v(" "),a("p",[t._v("java中，你如果 没有在数字后面声明，浮点数默认为double。")]),t._v(" "),a("blockquote",[a("p",[t._v("要注意是(short)10/10.2*2，而不是(short) (10/10.2 *2)，前者只是把10强转为short，又由于式子中存在浮点数，所以会对结果值进行一个自动类型的提升，浮点数默认为double，所以答案是double；后者是把计算完之后值强转short。")])])])}),[],!1,null,null,null);a.default=r.exports}}]);